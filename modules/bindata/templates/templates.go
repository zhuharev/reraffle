// Code generated by go-bindata.
// sources:
// templates/add.tmpl
// templates/edit.tmpl
// templates/error.tmpl
// templates/healts.tmpl
// templates/index.tmpl
// templates/layout.tmpl
// templates/login.tmpl
// templates/raffle.tmpl
// templates/raffles.tmpl
// templates/settings.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _addTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xcf\x4e\xe3\x48\x10\xc6\xef\x79\x8a\x52\xaf\x90\x40\xda\x60\x60\xa5\xd5\xee\xca\xb6\x04\xab\xd5\x0a\xb4\x1c\x58\xb4\xda\x63\xe4\xb8\x9b\xc4\x8a\x9d\xf6\xd8\x9d\x00\x83\x90\x42\x90\xe6\x8f\x82\x86\xcb\x9c\x66\xc4\x7d\x8e\x4e\x48\x44\x20\xc4\xbc\x42\xf5\x1b\x8d\xba\x83\x15\x23\x66\x82\xc2\xcc\xe4\x14\x57\x57\x77\x7d\xf5\xeb\xaf\x6c\x73\x8f\x47\x01\x04\x4c\x54\x39\xb5\x48\xc8\x63\x41\xc0\x71\x85\xc7\xeb\x16\x31\x1c\x4a\x4b\x61\xa3\xec\x7b\x2e\xb1\x0b\x05\x00\x00\x73\xcf\x63\x3e\x8d\x99\x00\xd7\x77\xe2\xd8\x22\x8d\x5a\x31\x0b\x11\x5b\xa7\xe8\x34\x9f\x55\x58\x9d\xda\xf8\x1e\x53\xec\x62\x82\x3d\x1c\xca\xb6\x3c\x03\xbc\xc3\x04\xbb\x38\xc2\x21\xde\x98\xc6\x7d\xd6\x74\x1b\xf5\x9a\xb9\x83\x03\x27\xaa\x78\xf5\xdc\xb1\x00\xa6\x57\x0f\x1b\xf9\xe2\xfa\x99\x40\xdd\x09\x98\x45\x26\x5a\x4b\x1e\x25\x20\x0e\x43\x66\x11\xc1\x0e\x04\x81\xd0\x77\x5c\x56\xe5\x3e\x65\x91\x45\x36\xe9\x03\x11\x98\xe4\x65\x1b\xd4\x6b\xce\x25\xc7\x77\xca\xcc\x87\x3c\x0c\x1e\x05\x45\x1d\x25\xb0\xc7\x23\x8b\x10\x1b\x3f\xdd\x97\x4b\x71\x0c\x78\x27\x5b\x98\xe2\x2d\xa6\x78\x83\x29\xf6\x31\x81\x45\x1c\x63\xa2\xe3\x43\xbc\xc5\x81\x6c\xfd\x0c\x04\x2f\xf0\x63\x71\x81\x16\x17\x28\x81\x22\x60\x4f\x2f\x9c\xc8\x36\xa6\xb0\x40\x01\xbb\xf2\x14\xfb\x38\x90\x6d\xd5\x4b\x8a\x7d\xbd\xa4\x28\x8f\x70\x80\x63\xd9\xd1\x61\xd9\x92\xe7\xd8\xd7\x65\x7a\xb2\x83\xd7\x80\x63\x5d\x79\x20\x5b\xa0\x45\x5c\xc9\x0e\x5e\xca\x96\xec\xc8\x37\x98\x00\x0e\x21\x57\x45\x9f\x3b\x92\x67\x78\xa5\xb6\x63\x22\xdb\x38\xc0\x91\x3c\x5f\x32\x0d\xdd\x9d\x6d\x96\xa3\x39\x2e\x26\xe2\x01\x77\x39\x65\x25\xc1\x82\xd0\x77\x04\x9b\x71\x43\x4f\xf0\x22\xf6\x73\xaf\x69\x8e\x5b\x4a\x65\x1b\x7b\x0a\xb0\x02\x33\xc6\x04\xe4\x09\xa6\xca\xcb\xf2\xad\x22\x8c\x43\x1c\x7c\x15\x51\x46\x28\x2f\x40\xb5\xe9\x44\xcc\xb9\xe7\xe1\xd4\xe3\x7d\x16\xe5\x60\x4c\xa5\x65\x99\x04\x3c\x6a\x11\x02\x11\xdf\x8f\x2d\xb2\xba\x42\xec\xa3\x23\x58\xce\x76\xc0\xf1\xb1\x69\x64\xa9\xdf\x6e\xe0\x99\x64\xd4\xc4\x5c\xca\x53\xbc\xc4\x51\x51\xdb\x6c\x84\x43\xf9\x4a\x76\x60\xb1\x2a\x44\x18\xff\x61\x18\x94\xbb\xf1\x72\x85\xf3\x8a\xcf\x96\x5d\x1e\x18\x71\x18\x31\x87\xc6\x55\xc6\x44\x6c\x50\xc3\x2c\xdb\xab\x7f\xed\x6c\xad\xef\x46\xbf\xff\xd9\xd8\xf0\xd7\xdd\xdd\xa0\xe9\x6f\xf1\xbf\x77\x5e\xbe\x70\xfe\xdb\x3e\xd8\xae\xad\xff\xbf\xf6\xef\x66\x69\xed\xb7\x5f\x7f\xd9\xfe\x67\x63\xc7\x34\xca\xb6\xc1\xa8\x27\x7e\xaa\x78\xd4\x5a\x59\xfa\x12\xcf\x99\x6e\xd3\x85\x9f\x7e\x0b\x3c\xe8\xa9\x9b\x75\xf5\x1d\x5e\x07\xb3\x7d\x76\x81\x09\x5e\x29\xbf\x64\x36\x52\x85\x4f\x26\x4e\xeb\x4d\x55\x61\x5f\x59\x5e\x9e\xaa\x99\xc4\xb1\xf2\xd6\x33\x39\xa8\xff\xb3\xa6\xed\xd9\x7a\x7e\x38\xa9\x0f\x38\x92\xef\xe4\xeb\x07\xb3\xa7\x95\xf5\x94\xb6\xbe\x9a\xb5\xc7\x73\x79\x3d\x37\xa6\x66\xad\x54\x63\x87\xb3\x10\xcd\x12\xf2\x98\xc2\xf4\xb9\xdc\x10\x82\xd7\x73\x75\x27\x01\xf2\xe8\xbb\x68\x1a\x93\x15\xbb\xa0\x7e\x93\xb3\xb2\xcf\xaa\x5d\x28\x98\x86\xc2\x63\x17\x3e\x07\x00\x00\xff\xff\x56\xf9\xf1\xb3\xad\x07\x00\x00")

func addTmplBytes() ([]byte, error) {
	return bindataRead(
		_addTmpl,
		"add.tmpl",
	)
}

func addTmpl() (*asset, error) {
	bytes, err := addTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "add.tmpl", size: 1965, mode: os.FileMode(436), modTime: time.Unix(1497204792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\xdd\x8e\xda\x46\x14\xc7\xef\x79\x8a\xa3\xa9\x56\x4a\xa4\x82\x93\x54\xaa\xda\xca\xb6\x44\xd2\xaa\x22\xea\x56\xdd\x6e\xda\x5e\xa2\xc1\x33\x80\x85\xed\x71\x6d\x43\x92\x46\x91\x58\x56\xea\x87\x58\x35\x37\xbd\x6a\x95\x5e\xf7\xd2\xb0\xa0\x25\xcb\xe2\x7d\x85\x33\x6f\x54\xcd\x00\xc2\x08\xca\x2e\xdb\x96\x2b\x7c\xe6\xcc\x9c\xff\xfc\xce\x87\x6d\xd6\x45\xe4\x83\xcf\x93\xa6\x60\x16\x09\x45\x9c\x10\xa0\x4e\xe2\x8a\xc0\x22\x06\x67\x6e\x62\xbc\x7a\x05\xa5\x46\x24\xda\x61\xe9\xdb\x56\xe5\x53\x78\xfd\x9a\xd8\x85\x02\x00\x80\x59\x77\xb9\xc7\x62\x9e\x80\xe3\xd1\x38\xb6\x48\xbb\x55\x5c\x9a\x88\xad\x5d\xb4\x9b\xc7\x1b\x3c\x60\x36\xfe\x86\x19\x0e\x30\xc5\x21\x4e\x64\x4f\x9e\x01\x5e\x63\x8a\x03\x9c\xe2\x04\x2f\x4d\x63\xe1\xb5\xda\xc6\xdc\x4e\xee\x60\x9f\x46\x0d\x37\xc8\x1d\x0b\x60\xba\x41\xd8\xce\x07\xd7\xcf\x04\x02\xea\x73\x8b\x84\xed\x9a\xe7\x3a\x55\x97\x11\x48\x5e\x86\xdc\x22\x09\x7f\x91\x10\xe8\x50\xaf\xcd\x2d\xb2\x79\x29\x08\x3d\xea\xf0\xa6\xf0\x18\x8f\x2c\x52\x61\x6b\xf2\x30\xcd\x5f\xc8\x60\x6e\x67\x2f\xa1\x1e\xad\x71\x0f\xf2\x98\x44\xe4\x17\xb5\x95\x40\x5d\x44\x16\x21\x36\xfe\xb5\x08\x97\xe1\x0c\xf0\x5a\x76\x31\xc3\x2b\xcc\xf0\x12\x33\x1c\x61\x0a\xf7\x70\x86\xa9\xb6\x4f\xf0\x0a\xc7\xb2\xfb\x3e\x10\x7c\x8b\x7f\x14\x0f\x58\xf1\x80\x11\x28\x02\x0e\xf5\xc2\x89\xec\x61\x06\x07\x0c\x70\x20\x4f\x71\x84\x63\xd9\x53\x77\xc9\x70\xa4\x97\x14\xff\x29\x8e\x71\x26\xfb\xda\x2c\xbb\xf2\x0d\x8e\x74\x98\xa1\xec\xe3\x3b\xc0\x99\x8e\x3c\x96\x5d\xd0\x22\x2e\x64\x1f\xcf\x65\x57\xf6\xe5\xcf\x98\x02\x4e\x20\x17\x45\x9f\x3b\x95\x67\x78\xa1\xb6\x63\x2a\x7b\x38\xc6\xa9\x7c\x73\xdf\x34\xf4\xed\x6c\xb3\x16\xed\x91\xb2\x48\xf8\xc2\x11\x8c\x57\x13\xee\x87\x1e\x4d\xf8\x96\x7c\x7d\xa5\x9c\x9e\x08\xc6\x9f\x2d\x7c\x74\xf2\xf2\x29\x5e\x4b\xe4\x0d\x58\x89\x7d\xd7\x6c\xee\x91\xcc\x4c\xf6\x70\xa8\xf2\xa0\xf8\xcd\x30\x05\x79\x82\x99\x6a\x06\xf9\x8b\x4a\x04\x4e\x70\xfc\x8f\x24\x97\x20\xf3\x02\xd4\x35\x69\xc4\xe9\x02\x1b\x0d\xe2\xe7\x3c\xca\x31\x5b\x49\x5b\x7a\x12\x70\x99\x45\x08\x44\xe2\x79\x6c\x91\x87\x0f\x88\xbd\x02\x5a\x09\xea\x22\xc7\xd2\x34\x96\x9b\xfe\x7d\xc5\xef\x64\xa4\x5a\xec\x5c\x9e\xe2\x39\x4e\x8b\xba\x2e\xa7\x38\x91\x3f\xca\x3e\xdc\x6b\x26\x49\x18\x7f\x62\x18\x4c\x38\x71\xa9\x21\x44\xc3\xe3\x25\x47\xf8\x46\x1c\x46\x9c\xb2\xb8\xc9\x79\x12\x1b\xcc\x30\x6b\xf6\xc3\xcf\x8e\x9e\x96\x8f\xa3\x8f\x9f\xb4\x1f\x7b\x65\xe7\xd8\xef\x78\x4f\xc5\xe7\x47\x3f\x7c\x4f\xbf\x39\x7c\x71\xd8\x2a\x7f\xf7\xe8\xeb\x4a\xf5\xd1\x47\x1f\x7e\x70\xf8\xc5\xe3\x23\xd3\xa8\xd9\x7a\xa2\xbd\xd7\x70\x99\xf5\xe0\x3e\x98\x14\x9a\x11\xaf\x5b\xe4\x96\xf1\x56\xc8\x8e\x95\x49\x8f\x0d\x7d\x20\xb1\xf1\x4f\xd9\xc3\x4b\xdd\x24\x3d\x79\x66\x1a\xd4\xde\x96\xb7\x9d\xc5\xaf\xc3\xdc\x3c\xae\x56\xa1\xb7\x4c\xac\x35\x9c\x83\x25\xd0\xff\x60\x74\xed\x2e\xf6\xb7\x98\xe2\x85\x2a\xda\x65\x2d\xab\xc0\x27\xf3\x72\x1f\xae\x54\xe1\x48\xf5\x9d\x3c\x55\xf3\x03\x67\xaa\xc0\xef\x08\x49\xfd\xbf\x0d\xa6\x2f\xa9\xcf\x37\x41\xdd\x5d\xee\xff\x0e\xf2\x77\x9c\xca\x5f\xe5\x4f\x6b\xf3\x41\x2b\x1b\x2a\x6d\x23\x35\x0f\x36\x67\xc7\xbb\xbd\x29\x76\x5a\xd5\x16\x7f\x79\xe3\x7b\xb1\xec\x38\x3c\x8e\x9f\x89\x16\x0f\xb6\x50\xdc\xa5\x75\x13\xd4\xea\xb9\xd6\x4e\x12\x11\xe4\xa4\xcd\x0d\xaa\x87\x70\xa0\xdf\x3d\x8b\xef\x03\xd3\x98\xaf\xd8\x05\xf5\x9b\x9f\xb5\xfc\xbc\xb0\x0b\x05\xd3\x50\x04\xed\xc2\xdf\x01\x00\x00\xff\xff\xf3\x58\x56\x37\xc1\x08\x00\x00")

func editTmplBytes() ([]byte, error) {
	return bindataRead(
		_editTmpl,
		"edit.tmpl",
	)
}

func editTmpl() (*asset, error) {
	bytes, err := editTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.tmpl", size: 2241, mode: os.FileMode(436), modTime: time.Unix(1501019884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func errorTmplBytes() ([]byte, error) {
	return bindataRead(
		_errorTmpl,
		"error.tmpl",
	)
}

func errorTmpl() (*asset, error) {
	bytes, err := errorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.tmpl", size: 0, mode: os.FileMode(436), modTime: time.Unix(1496522760, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _healtsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x29\xb0\xab\xae\x2e\xcf\x2c\xc9\x50\xd0\xcb\x88\x2f\xcb\xae\xad\xbd\x30\xef\x62\xc7\x85\x1d\x17\x36\x5e\xd8\x75\x61\x83\xc2\x85\x49\x17\x76\x5d\xd8\x77\x61\xef\xc5\xa6\x0b\x1b\x2e\xec\xba\xd8\x74\x61\xab\x95\x42\x75\xb5\x5e\x6d\x6d\x75\x75\x6a\x5e\x4a\x6d\xad\x8d\x7e\x81\x1d\x17\x8a\x11\xc5\x19\xe8\x46\x4c\xbe\xd8\x7c\x61\xf3\x85\xdd\xba\x60\x33\x36\x5e\xd8\x7d\x61\xc7\xc5\xb6\x8b\xdd\x84\xcc\x29\xc9\x45\x37\x67\x05\x54\xfb\xbe\x0b\x7b\x2f\x6c\xc0\xa2\x1d\x10\x00\x00\xff\xff\x79\x70\x4a\x36\xca\x00\x00\x00")

func healtsTmplBytes() ([]byte, error) {
	return bindataRead(
		_healtsTmpl,
		"healts.tmpl",
	)
}

func healtsTmpl() (*asset, error) {
	bytes, err := healtsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "healts.tmpl", size: 202, mode: os.FileMode(436), modTime: time.Unix(1500910079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x4a\x33\x31\x14\x85\xf7\x79\x8a\x4b\x56\xff\xbf\xe8\x64\xaf\x69\x56\x6e\xdc\x8b\x1b\x11\x49\x27\xd1\x0e\xbd\xb4\x65\x92\x59\x48\x0c\xd8\xee\x04\xc1\x8d\x0f\xa0\xf8\x02\xb5\x58\x28\x8a\xf3\x0c\x37\x6f\x24\x69\xa7\xda\x95\xae\x02\x87\x7c\xe7\x9e\x73\x98\xd4\x50\xa2\x76\xae\xcf\x9b\x51\x6f\xd0\x78\x3f\x19\x73\x18\xd6\xf6\xb2\xcf\x85\x36\xe6\x62\xda\x0c\xb0\x2a\xb9\xa2\x47\x6a\xe9\x95\x16\xb4\xa4\x75\x9a\xa7\x7b\x48\x33\x6a\xb3\x94\xee\x68\x95\x66\x69\x4e\x4b\x6a\xa5\xd0\x8a\x31\xe9\xfc\x35\x5a\xc5\x0a\xa3\xc7\x57\xb6\x86\xc0\x00\xca\x09\x4e\xea\x03\xa8\xad\x39\x64\x91\x49\xd1\x7d\x61\xb2\xc1\xbd\xfb\x58\x39\x0f\xdd\xdb\x73\x53\x5d\x5a\xae\x42\xa8\xb3\x0d\x14\xdb\x24\x2e\x46\x26\xb1\x52\x52\xef\x52\x76\xba\x08\xa1\x38\x1d\x1d\x1f\xc5\x98\x99\xe2\xa4\xf2\x68\x63\x84\x7f\xdf\xf2\xff\x9c\x0e\xe0\xec\x87\xb4\xa6\xf2\xfb\x18\x3d\xd1\x8a\xde\x68\x41\xef\x69\x4e\xeb\x74\x4b\x2d\x2d\x69\x91\xdb\x6e\xd0\x1b\xf8\xe5\xa8\x30\x16\xad\xb7\x7c\xd7\x66\xdb\x9d\x2b\x7a\xd9\x38\x7e\x6c\x57\xcb\x3e\xe7\x7f\x18\x0d\xad\x46\xef\xb8\x02\x7a\xa6\x76\xb3\x6c\x9b\x1e\xe8\x93\xd6\xb4\xca\xb8\x14\x58\x29\x16\x82\x1d\x9b\x18\xa5\x68\x50\xb1\xaf\x00\x00\x00\xff\xff\x2f\x14\x7b\x82\xc5\x01\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 453, mode: os.FileMode(436), modTime: time.Unix(1500501032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x41\x6e\x2a\x31\x0c\xdd\xcf\x29\xf2\xb3\x87\x5c\x20\x93\xcd\xff\x7f\xdd\x2e\xba\xe9\x32\x64\x0c\x63\x08\xa1\x8a\x33\x23\xa1\x68\xa4\xb6\xf7\xa8\x7a\x05\xba\xa3\xad\xd4\x33\x84\x1b\x55\x10\x0a\x03\x45\x95\xba\x72\x62\xbf\x67\xfb\xd9\x96\x7f\xfe\x5d\xfd\xbd\xb9\xbd\xfe\xcf\xea\x30\xb7\xaa\x90\xd9\x30\xc6\x98\xac\x41\x57\xf9\xb9\xfb\x06\x0c\x16\x94\x14\xd9\x1e\xfd\x16\xdd\x8c\x79\xb0\x25\xa7\xb0\xb4\x40\x35\x40\xe0\xac\xf6\x30\x2e\xb9\x30\x44\xa2\xc1\x19\x86\xe1\x1c\xdd\xd0\x10\x71\x26\x7e\xcd\x1d\xf8\x60\x2f\xf3\xc9\x78\xbc\x0b\x8c\xbc\x29\xb9\x98\xf6\x4b\x4d\x89\x2b\x29\x72\x7c\xaf\x47\x1c\x05\xc9\xd1\xa2\x5a\xaa\x42\x56\xd8\x32\x63\x35\x51\xc9\x9b\xd9\xc0\x2c\x5c\xd0\xe8\xc0\xf3\x2d\x2a\x46\x1c\xb3\x21\x78\xbf\xf0\x5d\x77\x86\xd4\x16\x7c\xe0\x2a\xc6\x43\x5c\x54\xd8\xaa\x18\xc1\x55\x5d\x77\x20\xcf\x81\x48\x4f\xe0\x07\xfa\x11\x71\x96\x40\x3a\xdd\x67\x38\xdd\x8e\x74\xee\x6b\xd7\x7f\x63\xbf\x05\xb7\x86\x9f\xcc\xb6\x5f\xd1\x04\x6c\x81\x2b\xa9\xbf\xa6\xcb\x55\x7a\x4e\xab\xf4\x92\xde\xd3\x3a\xbd\xa5\xb5\x14\x5a\x49\x61\xf1\x24\x43\x0f\x4f\x10\x02\xba\x09\x71\x95\x9e\xd2\x6a\xf3\xb0\x79\xdc\xdc\xa7\x8f\xf4\x7a\x89\x2b\x45\xb3\x3b\x22\x29\x9c\x6e\xb3\x33\x46\xb6\x44\xb0\x15\xeb\xba\x22\x6b\x2d\x8a\xfd\x5a\xf6\xbb\x10\xf9\xf4\x3e\x03\x00\x00\xff\xff\x1b\x32\xb8\x1f\x92\x02\x00\x00")

func layoutTmplBytes() ([]byte, error) {
	return bindataRead(
		_layoutTmpl,
		"layout.tmpl",
	)
}

func layoutTmpl() (*asset, error) {
	bytes, err := layoutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.tmpl", size: 658, mode: os.FileMode(436), modTime: time.Unix(1496675495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loginTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x4f\x41\x0e\xc3\x20\x0c\xbb\xf3\x8a\x28\x77\xd4\xfb\x04\xfd\x0b\xa2\xb4\x8b\x0a\x01\x95\xb4\xda\x7e\x3f\x41\xa5\xad\x1d\x07\x94\xd8\xc6\x36\x4a\x99\x89\x0e\xf0\xd1\xd5\x6a\x71\x5f\xb5\x8b\xb4\xb0\xf6\x81\x25\x6c\x38\x2a\x00\x33\xe7\x2d\x41\x0a\xf2\xcc\x93\xc5\x92\xab\x9c\xf0\xfd\x59\x72\xdb\x42\xdc\x99\x76\xfe\x58\xe2\x48\x1c\xbe\x6c\x57\xd4\xe2\xf8\x22\x69\x29\x9a\x7c\x66\xb8\x2e\x7a\x8e\x54\xb0\x41\x6d\xb3\xd8\xee\x07\xc4\xec\x57\x1c\xcd\xd0\x2c\x6e\x9e\xc4\x65\x97\x5b\x6e\xd9\x05\x81\x5d\x0a\x16\x8b\xab\x15\x41\xde\x25\x58\x94\xf0\x92\x5f\xd9\x61\xa2\xa3\xff\xe9\x1c\x94\x19\x5a\x81\x3e\x74\xe0\x13\x00\x00\xff\xff\x2a\xc4\x98\xf4\x25\x01\x00\x00")

func loginTmplBytes() ([]byte, error) {
	return bindataRead(
		_loginTmpl,
		"login.tmpl",
	)
}

func loginTmpl() (*asset, error) {
	bytes, err := loginTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login.tmpl", size: 293, mode: os.FileMode(436), modTime: time.Unix(1496954960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raffleTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6e\xd3\x30\x18\xc7\xef\x79\x0a\x2b\xa7\x71\x68\x72\x2f\x49\x76\xe1\xb2\x03\x30\x09\x89\x6b\xe5\x26\x5f\xdb\x28\xae\x53\xd9\x0e\x08\x59\x96\xd6\x54\x02\x0e\x7b\x04\x34\x5e\xa1\xdd\x88\x54\x56\xd6\xbe\xc2\xdf\x6f\x84\x52\xca\xe0\x04\x3b\xd9\xfa\xfc\xc9\xbf\xdf\xff\x9f\x70\x96\x0b\xae\x75\x1a\x36\xd5\x60\xdc\x18\x53\xcb\x90\xcd\x14\x4d\xd2\x30\xd6\xb3\x66\x32\x11\x14\x5b\x1b\x29\xde\xdf\xa2\xd7\xef\x25\xa9\x8b\x17\xce\x8d\xfe\xcc\x2e\x6b\x6d\xfa\x51\x98\xe1\x2b\x3a\x7f\x85\x0e\x3f\xd0\xf9\xcf\x58\xfb\xd6\x5f\x33\x1c\xb0\xc7\x06\x1d\xbe\x61\xeb\x5b\x74\xd8\xa1\xc3\xf7\x24\xe6\x59\xf0\x2f\xf6\xaf\xcf\xf5\x13\xd9\xe7\xcd\xa2\xe0\x86\x52\xa3\x1a\x0a\x33\xdc\x60\x83\x07\xec\x71\xdb\x23\xfd\x35\xf3\x4b\x1c\xb0\xf5\x4b\xec\x71\xcf\xfc\xca\x7f\xc2\xda\x2f\x7d\x8b\x07\x6c\x71\xdf\xef\xfd\x57\x47\x93\x2c\x46\xa6\x1e\xe9\x19\x91\x39\x2f\x8b\xf4\xc9\x9d\xdc\xf8\x16\x07\x7f\x85\xf5\xa3\x0d\x6e\x19\xee\xfc\x0a\x77\xd8\x0d\x7c\x8b\x35\x36\xd8\x61\xeb\x3f\xfa\xd5\x51\x23\x08\x92\x46\xfc\x65\x22\x4a\x6d\xd8\xe9\x1c\xe8\x05\xcf\x29\xcc\xac\x55\x5c\x4e\x89\xfd\xe6\xbd\xa4\xf9\x98\x94\x76\x2e\x48\x44\xc9\xac\x2d\x27\x2c\xba\x90\x93\xfa\x0d\xc9\x82\x0a\xe7\xb4\xf9\x20\x28\x0d\xc7\x3c\xaf\xa6\xaa\x6e\x64\x31\xc8\x6b\x51\xab\xe1\x54\x11\xc9\xe7\xa1\xb5\x24\x0b\xe7\xb2\x84\x9f\xf2\xce\x8c\x59\xe8\x61\x1c\xbf\xab\xa2\xbc\x9e\xc7\x65\x61\x6d\xf4\xb6\x3a\x26\x62\x86\xab\x29\x99\x34\x1c\x8d\x05\x97\x55\xef\xc2\xa2\x57\x7c\x4e\xcc\x39\x76\x56\x16\xc3\xc7\xd5\x67\x7d\x1c\x76\x86\x2f\xe8\x8e\x6d\xef\x87\xcc\xda\xe8\x52\xf0\x9c\x8e\x8f\xa2\xcc\x82\x13\x39\x89\x1b\x91\x05\x3f\x03\x00\x00\xff\xff\xd4\xc2\x02\x96\x8c\x02\x00\x00")

func raffleTmplBytes() ([]byte, error) {
	return bindataRead(
		_raffleTmpl,
		"raffle.tmpl",
	)
}

func raffleTmpl() (*asset, error) {
	bytes, err := raffleTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "raffle.tmpl", size: 652, mode: os.FileMode(436), modTime: time.Unix(1501267293, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rafflesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6a\xdb\x40\x10\xc6\xef\x7a\x8a\xe9\xde\x25\xc5\xa5\xbd\x84\x95\x20\x10\x0a\x85\x42\x4b\x02\xbd\x86\x8d\x77\x14\x0b\xaf\x25\xa1\x5d\x35\x2d\x8b\xc0\xf5\x25\x05\xf7\xd8\x73\xff\xbc\x81\x93\xd6\xd4\xd4\xd8\x79\x85\xd9\x37\x2a\x2b\x39\xa9\x43\x2e\x3d\x69\xff\xcd\xf7\xcd\xef\x1b\xf1\xd1\x20\xa5\xef\xb4\xa5\xdf\x6e\x4e\x3f\xdd\xd4\xcd\xdd\x27\x5a\x01\xdd\xd2\x82\xae\x69\x4d\x2b\xfa\x43\x0b\xb0\x36\xaa\x9a\x73\x95\x0f\xa3\xb7\xe3\x97\xc7\x6d\xcb\xe3\xd1\x20\x0d\x02\xfe\x24\x0c\x79\x56\xd6\x13\x18\x2a\xa1\x75\xc2\x9a\x71\xe8\xb7\x0c\x26\x68\x46\xa5\x4c\x58\x55\x6a\xc3\x40\x0c\x4d\x5e\x16\x09\x8b\x85\x94\x67\xb5\xc8\x32\x85\x2c\x0d\x02\x00\x00\x9e\xe5\xa8\xa4\x46\x03\x52\x18\x11\x36\xe3\x70\x22\xea\x8b\xbc\x48\xbb\xdb\xee\x85\xc2\x0b\x2c\x64\x4a\x5f\x68\x4b\xd7\xb4\xa0\x1b\x5a\xb9\x99\xfb\x0c\x6e\xfa\xb0\x6d\x1e\xef\x5e\xfe\x2b\xcd\x8b\xaa\x31\x50\x88\x09\x26\xac\xf7\x3d\x6b\x6a\xc5\xc0\x7c\xa8\x30\x61\x06\xdf\x1b\x06\x95\x12\x43\x1c\x95\x4a\x62\x9d\x30\xfa\xe1\x3e\xba\x39\xad\x3b\x6a\xda\xd0\xe2\x91\x0b\xdb\x93\x3f\x6f\x8c\x29\x8b\x3d\xf8\xfe\x80\x3d\xea\x95\xc7\xfd\x4d\x5f\xcb\xe3\x3b\x68\x9f\x61\xec\x13\x4b\xc3\xd0\xaf\x1b\xb5\x27\xa6\x72\x6d\x60\xf7\x0d\x75\x25\x86\xc8\x52\x6b\x6b\x51\x5c\x20\xdc\x8d\xe3\xa4\x83\xd2\x6d\x1b\x70\x95\xa7\x5c\xc0\xa8\xc6\x2c\x61\x71\x0f\xab\x63\x6b\xa3\xd7\x97\x05\xd6\x7e\x68\x67\xd6\x46\x6f\x4a\x6d\xfc\xda\x2b\x45\xa7\x46\xd4\xe6\x58\x18\x8c\x5e\x94\xf5\x44\x18\x60\x07\x83\xe8\xe0\x29\xf3\xf3\x15\x29\x8f\x55\x9e\x06\xd6\x62\x21\xfd\x41\xa3\xd2\x20\x08\xb8\xcc\xdf\x79\x08\xee\xb7\x9e\xe5\xbe\xa1\xde\xf1\x55\xae\xcd\xae\x19\xfa\xea\x66\x74\xeb\xa6\x5d\x0a\x6b\x5a\xd2\x86\xb6\x87\x60\x2d\x44\xa7\x58\x48\x94\x47\xe6\xa1\x2d\x0c\x9e\x1f\x1e\x3c\x63\xd0\xb6\x40\xdf\x7c\xea\xee\xca\x87\x47\x8b\xfb\xc2\x3c\x83\xe8\x04\x85\x44\xe9\xdf\xfc\xea\xfe\x4b\x40\xa5\xb1\xab\xd9\xd0\xd2\xcd\x60\xd7\x6f\xd0\xb9\xdf\xd0\xd2\x5d\xed\x39\x7b\x81\xa3\x42\x5f\x62\xfd\x1f\x12\x3d\x7f\xcf\xd8\x6b\xfa\xc9\x79\x6e\x1e\x77\x29\xfc\x0d\x00\x00\xff\xff\x68\xaa\x90\x03\x3b\x03\x00\x00")

func rafflesTmplBytes() ([]byte, error) {
	return bindataRead(
		_rafflesTmpl,
		"raffles.tmpl",
	)
}

func rafflesTmpl() (*asset, error) {
	bytes, err := rafflesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "raffles.tmpl", size: 827, mode: os.FileMode(436), modTime: time.Unix(1501275413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _settingsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\xcd\x4e\xdb\x4e\x14\xc5\xf7\x79\x8a\xab\x59\xf1\x97\xfe\x60\x2a\x54\x75\x63\xfb\x29\xba\x8f\x86\x78\x42\x2c\x1c\x3b\xb2\x27\x7c\x08\x21\x25\x46\x50\xa4\x20\xd1\x75\x77\x55\x37\x5d\x9a\x7c\x80\x21\x8d\xf3\x0a\xe7\xbe\x51\x35\x76\x8c\x52\x94\x4a\x45\xfd\xd8\xcd\x4c\x26\xf7\xdc\xf3\x3b\x77\x6c\x77\xf6\x5c\x7c\xc4\x98\x53\x14\x3c\x40\x8e\x07\xe4\x3c\xe0\x0b\x3c\x72\x8a\x19\x61\x59\x1e\xce\x51\xe0\x1e\x33\x2c\x90\x63\xf6\x3f\x61\x81\x0c\xf7\xc8\x30\x2e\x97\xc4\x43\x1e\xf2\x08\x73\x3c\xf1\x85\x6d\x75\xf6\xdc\x86\x2d\xa9\x13\xab\xb6\x23\xac\xa4\xa3\x94\x6e\xca\xbe\xee\x08\xd2\x32\x3e\x50\xda\x11\xcd\xfd\x40\x86\x87\xe2\xa5\x70\x81\x31\x32\x4e\xf9\x86\x87\x7c\x4b\xa6\xf8\x84\x2f\x30\xc1\x7c\x9b\x53\x64\xb8\xc3\x1c\x39\x5f\x21\xe3\x4b\xdb\x92\x6e\xc3\x6e\x47\x71\x97\x64\x4b\xfb\x51\x68\x84\xe4\x91\x6a\x56\x6a\x3a\x3a\x54\xa1\xa0\xae\xd2\x9d\xc8\x73\x44\x2f\x4a\xb4\x70\x1b\x44\xb6\x1f\xf6\xfa\x9a\x5a\x81\x4c\x12\x47\xf4\x0f\xb7\xcb\xbd\x20\x7d\xda\x53\x8e\xd0\xea\x44\x0b\x0a\x65\x57\x39\xa2\x15\x79\x4a\x50\x2f\x90\x2d\xd5\x89\x02\x4f\xc5\x8e\xc0\x27\x14\x98\x12\x0f\x51\x18\xc3\x29\x0f\x90\x19\x20\x7c\xc5\x23\x32\x2c\xd6\x9c\x64\x7c\x85\x1c\x79\x25\xba\xdf\xd7\x3a\x0a\xd7\x54\x57\x07\xcf\xab\x6d\x4f\xb5\x65\x3f\xd0\xc2\xc5\x67\x14\x7c\xf9\x5c\x39\xe5\x1b\xdb\xaa\xee\xb8\x0d\xdb\x32\x7e\xdd\x86\xed\xf9\x47\x6b\xc5\xba\x32\x3e\xf0\xc3\x4a\xe9\x47\x20\xfd\x9e\x27\xb5\x6a\xf6\x64\x92\x1c\x47\xb1\xb7\x81\xc7\x6b\x88\x98\x32\x2f\x89\x7c\x31\x1c\xca\x5e\x4d\x74\x65\xbf\x54\x6d\x78\x84\x47\xc2\x12\x19\x0f\x50\x60\xce\x37\xb5\xde\x1f\x82\x41\xf4\x8c\xc3\xf2\xfc\xa3\xd7\x53\x09\x23\xed\xb7\x4f\x9b\x95\xc3\x4d\x60\x02\xb9\xaf\x02\x6a\x47\x71\x85\xa1\xbc\xe8\xe2\xeb\x6a\x0e\x0b\x2c\x48\xe0\x0e\x33\x33\xb6\x9c\x62\x8c\x19\xa7\xa5\xf5\x09\x0a\x51\x3d\x90\x25\x0a\x7c\x43\x5e\xae\x8d\x81\xdb\x1d\xda\x7a\x4b\xfc\x01\x99\x99\x21\x8c\xff\xb3\xad\x52\x64\x25\x68\x14\x64\xac\xe4\x9a\x8b\xfa\xa8\xce\xa0\xea\xd6\xf7\xd6\x5a\xa2\x56\x14\x24\x8e\xd8\xdb\x15\x14\x47\xc7\x89\x23\xde\xec\x0a\xf7\xec\x8c\x76\x2a\x83\x74\x7e\x6e\x5b\x75\x99\xbf\x1c\xc1\xab\x33\x50\xa1\xf7\x6b\x01\xa8\xd0\xdb\xc0\x7f\x33\x64\x42\x41\xe6\x05\x96\x91\x0c\xf8\x7a\xf5\xd5\xca\xa9\x9c\xc4\x07\x1e\x61\xc2\x03\x1e\xf1\x35\xb2\x1d\xda\x32\x37\xe9\x1d\x61\x8a\x05\x66\x66\x64\xa7\xe6\xef\x05\x9e\x8c\x82\x89\xaa\x2e\x3a\x35\x3f\x97\xe3\x3e\xae\x0e\x96\xf5\x53\xff\x9d\x18\x6b\x63\x3f\x4d\x51\x85\xde\x7b\x75\xa2\xff\x65\x8c\xdf\x03\x00\x00\xff\xff\xa3\x2f\x71\xd0\x12\x06\x00\x00")

func settingsTmplBytes() ([]byte, error) {
	return bindataRead(
		_settingsTmpl,
		"settings.tmpl",
	)
}

func settingsTmpl() (*asset, error) {
	bytes, err := settingsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "settings.tmpl", size: 1554, mode: os.FileMode(436), modTime: time.Unix(1501019787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"add.tmpl": addTmpl,
	"edit.tmpl": editTmpl,
	"error.tmpl": errorTmpl,
	"healts.tmpl": healtsTmpl,
	"index.tmpl": indexTmpl,
	"layout.tmpl": layoutTmpl,
	"login.tmpl": loginTmpl,
	"raffle.tmpl": raffleTmpl,
	"raffles.tmpl": rafflesTmpl,
	"settings.tmpl": settingsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"add.tmpl": &bintree{addTmpl, map[string]*bintree{}},
	"edit.tmpl": &bintree{editTmpl, map[string]*bintree{}},
	"error.tmpl": &bintree{errorTmpl, map[string]*bintree{}},
	"healts.tmpl": &bintree{healtsTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"layout.tmpl": &bintree{layoutTmpl, map[string]*bintree{}},
	"login.tmpl": &bintree{loginTmpl, map[string]*bintree{}},
	"raffle.tmpl": &bintree{raffleTmpl, map[string]*bintree{}},
	"raffles.tmpl": &bintree{rafflesTmpl, map[string]*bintree{}},
	"settings.tmpl": &bintree{settingsTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

