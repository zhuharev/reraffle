// Code generated by go-bindata.
// sources:
// templates/add.tmpl
// templates/callback/edit.tmpl
// templates/callback/help.tmpl
// templates/callback/index.tmpl
// templates/callback/layout.tmpl
// templates/edit.tmpl
// templates/error.tmpl
// templates/healts.tmpl
// templates/index.tmpl
// templates/layout.tmpl
// templates/login.tmpl
// templates/raffle.tmpl
// templates/raffles.tmpl
// templates/settings.tmpl
// templates/user_healts.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _addTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\x4d\x6f\xdb\x46\x10\xbd\xeb\x57\x0c\xb6\x30\xe0\x00\x91\xe8\x24\xe8\x27\x48\x02\x4e\x11\x14\x09\xea\x02\x6e\x5a\xf4\x28\x50\xda\xb5\x4c\x98\xe2\xaa\x24\xe5\xd8\x0d\x02\xc8\x36\x52\xa7\x90\x51\x5f\x7a\x6a\x91\x7b\x8f\x94\x2c\x41\x8c\x65\x32\x7f\x61\xf6\x1f\x15\xb3\x14\x6d\xba\x56\x65\xc8\x6d\x2f\xb9\x49\xcb\xdd\x9d\x37\xef\xcd\xbc\x59\x73\x4b\x06\x6d\x68\x8b\x68\x5b\x72\x8b\x75\x64\x18\x31\x70\x9a\x91\x2b\x7d\x8b\x19\x0e\xe7\xf5\x4e\xb7\xe1\xb9\x4d\x66\x57\x2a\x00\x00\xe6\x96\x2b\x3c\x1e\x8a\x08\x9a\x9e\x13\x86\x16\xeb\xee\x54\x8b\x25\x66\xeb\x2d\x7a\x9b\x27\x5a\xc2\xe7\x36\xfe\x86\x19\x0e\x30\xc6\x21\x26\xea\x50\x9d\x00\xbe\xc7\x18\x07\x38\xc5\x04\xcf\x4d\x63\xb6\xeb\xea\x18\x77\x77\x4b\x17\xb7\x9d\xa0\xe5\xfa\xa5\x6b\x01\x4c\xd7\xef\x74\xcb\xc1\xf5\x7f\x06\xbe\xd3\x16\x16\xcb\xb1\xd6\x5d\xce\x20\xda\xef\x08\x8b\x45\x62\x2f\x62\xd0\xf1\x9c\xa6\xd8\x96\x1e\x17\x81\xc5\x9e\xf2\x6b\x20\x30\x2e\xc3\x36\xb8\xbb\xbb\x14\x1c\xcf\x69\x08\x0f\xca\x64\xc8\xa0\x5d\xd5\xab\x0c\xb6\x64\x60\x31\x66\xe3\x9f\xb3\x70\x19\xa6\x80\xef\x55\x0f\x33\xbc\xc0\x0c\xcf\x31\xc3\x11\xc6\xb0\x8a\x29\xc6\x7a\x3d\xc1\x0b\x1c\xab\xde\x7d\x60\xf8\x16\xff\xa8\xae\xf0\xea\x0a\x67\x50\x05\x1c\xea\x0f\x07\xea\x10\x33\x58\xe1\x80\x03\x75\x84\x23\x1c\xab\x43\xca\x25\xc3\x91\xfe\x44\x2c\x4f\x71\x8c\xa9\xea\xeb\x65\xd5\x53\xa7\x38\xd2\x61\x86\xaa\x8f\xef\x00\x53\x1d\x79\xac\x7a\xa0\x41\x4c\x54\x1f\xcf\x54\x4f\xf5\xd5\x1b\x8c\x01\x13\x28\x45\xd1\xf7\x4e\xd5\x09\x4e\xe8\x38\xc6\xea\x10\xc7\x38\x55\xa7\xf7\x4c\x43\x67\x67\x9b\x8d\x60\x09\x61\x02\xd9\x96\x4d\xc9\x45\x3d\x12\xed\x8e\xe7\x44\x62\x81\x42\xb7\xf0\xc5\xec\xbb\xca\xb4\x84\x4a\x99\x3a\xc4\x21\x11\x4c\xc4\xa4\x18\x83\x3a\xc0\x8c\x6a\x59\xfd\x42\x0c\x63\x82\xe3\x7f\xa4\xa8\x60\xa8\x0c\x80\xd2\x74\x02\xe1\xcc\xf8\x70\xfc\xf0\x85\x08\x4a\x64\x5c\x41\x2b\x76\x32\x70\xb9\xc5\x18\x04\xf2\x45\x68\xb1\x07\x6b\xcc\x7e\xf9\x12\x6a\xc5\x09\x78\xf5\xca\x34\x8a\xad\xff\xbe\x80\x17\x32\x43\x1d\x73\xa6\x8e\xf0\x0c\xa7\x55\x5d\x66\x53\x4c\xd4\xcf\xaa\x0f\xab\xdb\x51\xd4\x09\xbf\x30\x0c\x2e\x9b\x61\xad\x25\x65\xcb\x13\xb5\xa6\x6c\x1b\x61\x27\x10\x0e\x0f\xb7\x85\x88\x42\x83\x1b\x66\xc3\x7e\xf0\x64\xf3\xd9\xfa\xf3\xe0\xf3\x2f\xbb\x8f\xbd\xf5\xe6\xf3\xf6\xae\xf7\x4c\x7e\xb5\xf9\xd3\x8f\xce\xf7\x1b\x7b\x1b\x3b\xeb\x3f\x3c\xfc\xf6\x69\xfd\xe1\x67\x9f\x3c\xda\xf8\xfa\xf1\xa6\x69\x34\x6c\x43\x70\x37\xfa\xa8\xe5\x72\x6b\xed\xde\x3c\x3e\x17\x56\x9b\x0e\x7c\xbb\x0b\x5c\xcb\x69\x50\x64\xf5\x1f\xd8\xc1\xe2\x3a\x7b\x8b\x31\x4e\xa8\x5e\x8a\x32\xa2\xc0\x07\x79\xa5\x0d\xaf\x50\xe1\x88\x4a\x5e\x1d\x51\x4f\x62\x4a\xb5\x75\x47\x1e\xe8\xf7\xa2\x6e\xbb\x33\x9e\xff\x9d\xa9\xdf\x71\xaa\x7e\x55\xc7\xd7\x7a\x4f\x23\x1b\x12\xb6\x11\xf5\xda\xcd\xbe\x7c\xb7\x34\x4d\xbb\x3b\xf5\x1d\xb1\xbf\x88\xa2\x45\x40\x6e\xb2\x50\x59\x82\x87\x4b\x26\x74\xce\x14\x5b\xc7\xbf\xee\x46\x0c\x07\x38\x26\x97\xb9\x34\x25\x32\xf2\x33\xcc\x18\xe4\xa3\x43\x1b\x64\xa2\x7f\xa7\x98\xa8\xd3\x1a\xac\x7e\x0c\xea\x18\x63\x0d\x78\x38\xaf\x83\xca\x9e\x74\x3d\xd9\xac\x18\x26\xea\x84\x54\x26\x07\x3e\xa2\x25\xd5\xc7\x8b\xfb\x40\x89\x53\x85\x80\x7a\xad\xf1\x24\xf9\x9e\x81\xea\x91\x01\xd2\x84\x9f\x10\x0e\x75\x7c\x65\x93\x09\x4e\x80\x4a\x28\x77\x49\xed\x98\xa9\xea\xab\xd7\x1a\xbc\xbe\x99\x1c\x7e\x8c\xe7\xf3\x6d\x30\x17\xc9\x97\x91\xbb\xb5\x5f\xcf\xd5\x21\x67\xbc\xe4\x0a\x9a\xd2\x0b\x2d\xf6\x68\xed\xef\x5e\xd9\x0a\x64\xb7\x53\xfb\x46\x1f\xfc\x4e\xec\x45\x8b\x3d\xf3\xce\xa2\x09\x9f\xcf\xd1\x6c\xbe\x30\x40\x93\x75\xa2\x27\xf5\x58\xf5\xd4\x9b\x19\x49\xc9\x9c\x79\x5c\x83\x55\xda\x09\x9f\x52\xa5\xa7\x38\xa6\xf9\x3d\xa2\xe3\xf9\x20\x4c\x49\xde\xe2\xd2\x11\x7d\x9e\x15\xa4\x5e\xc8\x1f\x13\x13\x8c\x3f\x04\xe9\x85\xcf\x4b\xba\x17\x74\xdf\x22\xfb\x13\x9f\x2f\xa3\x79\xa3\x1b\x45\xd2\x2f\x81\xc8\x17\xd8\x8d\x17\xac\x69\xe4\x5f\xa8\xcd\x67\x4f\x62\xa3\x78\x00\xdb\x95\x8a\x69\x90\x91\xd9\x95\xbf\x02\x00\x00\xff\xff\x9a\x63\x26\x95\x57\x0b\x00\x00")

func addTmplBytes() ([]byte, error) {
	return bindataRead(
		_addTmpl,
		"add.tmpl",
	)
}

func addTmpl() (*asset, error) {
	bytes, err := addTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "add.tmpl", size: 2903, mode: os.FileMode(436), modTime: time.Unix(1502229064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _callbackEditTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xcf\x6e\xdb\x38\x10\xc6\xef\x7a\x0a\x82\xc0\x1e\x6d\x65\x73\x0c\x28\x01\xc1\xe6\xb0\xc1\x2e\xda\xa2\x39\xf4\x18\x50\x26\x63\xb1\x91\x44\x97\xa2\xdd\xba\x82\x00\xc7\x41\xdb\x43\x8a\xa6\x48\x7b\xed\x21\x6f\xe0\x24\x76\x6b\xc4\xb1\xfb\x0a\xc3\x37\x2a\x28\xc9\xa9\x83\xfc\x01\x52\xfb\xc6\xd1\x8c\x38\xdf\xef\xe3\x60\xc8\x9e\x54\x31\x8a\xb9\x0e\x25\xf3\x70\x4b\xa6\x1a\xfb\x0e\x42\x84\x89\x0e\x6a\x44\x34\x4d\x3d\xdc\xde\xaf\xc5\x54\x35\x45\x52\x64\x10\x22\x22\x69\xb5\xf5\x42\xb6\x88\x31\xd2\xdd\x16\xf7\xb0\xe6\x6f\x34\x46\x09\x8d\xb9\x87\x1b\x32\xd9\x13\x2a\xa6\x5a\xc8\x04\xa3\x56\x44\x1b\x3c\x94\x11\xe3\xca\xc3\x70\x6a\xfa\xa6\x07\x33\xb8\x84\x01\x82\x9f\x30\x83\xa1\xe9\xc3\x39\x8c\x4c\x0f\xbe\xc3\x10\x46\x30\x85\xb1\x39\xc6\x48\x30\x0f\x63\xd4\xa1\x51\x9b\x7b\x38\xcb\x50\xbd\xa1\xe2\xfa\x3f\x0b\x17\xef\x68\x25\x92\x26\xca\xf3\x52\xb8\xcb\x44\x67\x75\x04\x69\x3b\x60\x32\xa6\xe2\x0e\xf9\x87\x70\x06\x43\x98\xc1\x95\xd5\x7a\x8f\xce\x9d\xf9\xef\x8f\x93\x17\xd1\x80\x47\x68\x4f\x2a\x0f\x63\x1f\x3e\xc3\x15\xcc\x10\x4c\x60\x06\x17\x30\x86\x29\x71\x8b\xfc\x63\x51\x68\x2c\x77\x23\xd9\xbc\x8d\x72\x62\x6d\x87\x21\x8c\x4d\x1f\x46\x08\xa6\x30\x80\x1f\x70\x0e\x03\xfb\x02\x30\xba\x87\x6c\x33\x96\xff\xdb\xcb\x56\x00\x76\x09\x13\xf3\xc9\x7c\x40\x9b\xcf\xb6\x97\x40\xdb\xe7\xdd\x55\x81\xfd\xc7\xbb\x4b\x60\x6d\x6f\x21\xf8\x62\x0e\xe1\x02\x26\xc8\xf4\x61\x00\x67\x30\x81\xb1\x79\x6f\x8e\xfe\x90\x2e\x0d\x39\xd7\xbb\x82\x3d\x8c\x67\xf3\x77\xcf\xa0\xfd\x7d\x7b\x6b\x99\x87\xfa\x76\xd3\x39\x54\x00\x1d\x58\x38\x04\xe7\x08\x2e\xcc\x21\x4c\x6a\x8b\xac\x30\x5a\x8a\xd5\x9e\x57\xf2\x98\x05\xfb\x13\x1a\xf3\xdb\xf4\x41\x5b\x6b\x99\x2c\x68\xaa\x3e\x5c\x9f\x6a\x2d\x25\x62\xaa\xba\xd8\x87\x53\x98\x99\x77\xa6\x57\x36\x33\x7d\xf3\x91\xb8\x65\x8d\xef\x10\xd7\x2e\x50\xdf\x71\xb2\xcc\x76\xcc\x73\xc7\x21\xe1\xba\x9d\xed\xa1\xe9\xc1\xc8\x1c\x20\x73\x50\x2c\xb5\x72\xb5\x0d\x88\x1b\xae\xfb\x4e\x65\x48\xaa\xbb\x11\xf7\xf0\x6b\xc1\x74\xb8\xf1\xf7\xda\xda\x5f\x37\x2d\x61\x22\xa5\x41\xc4\x17\xc1\x42\xad\x5b\xe9\x86\xeb\x06\x52\xd7\x19\xef\xd4\xdf\x86\xed\x90\x2a\xde\xa9\xab\xb6\xdb\x08\xdc\x39\xf7\x0b\x1e\xfc\x2b\xe5\x7e\x35\xc8\x95\xb7\x95\x47\x7e\xa5\xb0\xd8\x27\xa5\x1c\x87\x68\xdb\x68\xc1\x8c\x32\x9e\x1f\x6a\x4c\x74\x04\xe3\x6a\x3e\x1d\x3a\xe4\x94\x95\xe7\x32\x56\xbf\x83\xaa\xc0\x87\x13\xcb\x0f\x57\xe6\x98\xb8\x3a\xbc\x23\xff\xb5\xb0\x73\x6a\x8e\xec\xb0\x2c\x56\x10\x77\x7e\x9f\xfd\x7e\xdd\x89\xe8\x40\xb2\xae\x9f\x65\x8a\x26\x4d\x8e\xea\x91\x6c\xe6\xf9\x43\x1a\x98\x6f\xed\x78\xce\x5f\xa1\x3c\x27\xae\x66\xf7\xe6\xeb\x4f\x83\x97\xbc\xa1\x6f\x95\x15\x42\xb2\x8c\x27\xac\x6a\x44\xdc\x52\x83\x43\xdc\xc2\x17\xdf\xf9\x15\x00\x00\xff\xff\x88\x2f\x72\x2b\x3f\x07\x00\x00")

func callbackEditTmplBytes() ([]byte, error) {
	return bindataRead(
		_callbackEditTmpl,
		"callback/edit.tmpl",
	)
}

func callbackEditTmpl() (*asset, error) {
	bytes, err := callbackEditTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "callback/edit.tmpl", size: 1855, mode: os.FileMode(436), modTime: time.Unix(1503057096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _callbackHelpTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xe3\x54\x14\xdd\xe7\x57\x3c\x79\x05\x52\x1a\x4b\x83\x84\xc4\x28\xad\x54\x46\x80\x02\xaa\xe6\x03\x3a\x7c\x89\x45\x9a\x86\x24\x6d\x92\x66\x12\xa7\x85\x59\x25\xb1\x4a\xa7\x0a\x4c\x87\x11\x0b\x34\x20\x95\x61\x01\x3b\xe4\x18\xbb\xf5\xc4\xb1\xfd\x17\xce\xfd\x47\xe8\xde\xd7\x66\xdc\x49\x1b\x15\x35\x9b\x2c\xfc\x9e\xcf\x3d\xe7\xdc\x73\xaf\x93\xdf\xac\xed\xae\x64\x94\xca\xb7\xf8\x57\x29\x3c\xa7\x21\x46\x08\xa8\x07\x07\x3e\x26\x0a\x2e\xc6\x08\xe1\xc0\xc3\x98\x6c\x65\xe0\x98\x7a\x08\x10\x22\xc6\x09\x7c\x44\x08\xe8\xc8\x60\x00\x53\x10\x18\x4f\x95\xea\xc5\x4e\x67\xd9\xe8\x6e\x2f\xb5\xcb\x9d\xd6\x4e\xb3\x53\xdb\x2d\x2f\xed\xd5\x36\xad\xaa\xa1\xab\xe4\x6b\x8d\x8a\xea\xb4\x4b\xcb\x46\xd5\xb2\x5a\xb7\x4d\xb3\x96\xab\x35\x2a\xdd\x76\xae\xb4\xd3\x30\x3b\xf7\x1f\x7e\xbb\xf7\xa0\x96\x6b\x35\x2b\x86\x2a\xd6\xad\x65\xa3\xd0\x28\x56\xca\xc6\x4a\x26\x6f\x0a\xdb\x4c\xbe\xb5\x32\xcb\x33\x21\x1b\x11\xc6\x34\x50\x06\x9e\xc3\xc7\x88\xf6\xc9\xc6\x18\x81\x21\xd4\xae\x43\x6c\x2e\xad\x0f\x5b\x5b\x5f\xec\x6d\x37\x53\xb4\xde\x60\xf4\x0b\x62\x8c\xe0\xc0\x45\x40\x03\xfa\x91\x9d\x9b\xb2\x50\x4b\xec\xec\x3e\x62\x78\x74\x44\x87\x08\xf0\xea\xc2\xf9\x35\x29\xce\x25\xf8\xde\xa7\xef\xde\x2d\xac\x7f\x79\x35\xc1\x63\x04\xf4\x44\x9b\x15\xc1\xc1\x29\x5c\x38\xdc\x40\xf8\x59\x45\x7d\x1a\x68\xee\x7c\xfc\x2f\x1c\xee\x30\x1d\x48\xcf\x11\x63\x8c\x98\x1f\xa8\x3b\x0f\xd6\xb2\xfa\xed\x13\xbe\x79\xee\xfd\x4b\xc4\xb4\x2f\xad\x88\xb4\xf8\x45\xe8\xd9\xf8\x60\xb5\xf9\xc8\xb2\xae\xd6\xf3\x02\x31\x12\x8e\x00\xd9\x9a\xc6\x18\x21\x3d\xa5\x83\x45\x14\x2f\xac\x35\xb6\x1e\x16\xee\xcf\x33\xd3\xa7\x1e\x7c\xdd\x53\xed\x9a\xab\x64\x4c\x26\x08\x24\x88\x76\x56\xc1\x9d\xfa\x1a\xd2\xd1\x05\x92\x0a\xc1\xac\x91\x06\x3b\x89\x53\x78\x70\xd8\xc5\xeb\x26\x77\xae\x92\x46\xe5\xb3\x7a\xf7\xe3\x4f\x2e\x57\x92\xc9\x57\x6f\xa5\x93\x3b\x65\x99\xc0\xc1\x08\x21\x02\xce\x66\xf5\xd6\x3c\xd1\x64\x23\x91\xde\xbb\x08\xf5\x46\x80\xaf\xa8\x8f\x98\x51\xe9\x10\xbe\x78\xe0\x22\xc6\x24\xab\xee\x14\xeb\xf5\x8d\x62\x69\x5b\xad\xde\x2b\x64\xf5\x2d\x91\x2b\x55\xa9\x2f\xf8\x2e\xff\x66\x95\x84\x2e\xdd\x5f\x03\x2f\x69\x40\x3d\x89\xa3\xa3\xcf\x69\x80\x98\xcf\xe9\xa9\x82\x27\x19\x95\xa5\xa4\x34\x06\x22\xb2\x65\x14\xd3\xc0\x0b\x31\xf5\xf3\xad\x7b\xef\x7f\xb4\xb5\x7e\xd3\x78\x24\x88\x79\xf2\xfa\x34\x44\x88\x31\x7c\x49\x44\xda\x95\x08\x11\x0d\x79\x57\xa4\x53\x33\x1b\x2a\xfa\x89\x8d\x90\x12\x89\xb8\xe0\x2b\x83\x2f\x9d\x9b\xa5\x1f\x7b\xd2\x06\xe6\x75\x02\x6f\xba\xbb\x73\xda\x0f\x5e\xa9\xa9\xb7\xf1\x0c\x9e\x08\xe8\x5f\x30\x8f\xa1\x66\xcb\xb3\x41\x9d\xdb\xa6\xb9\xb1\x63\xe5\x36\xcb\xbb\xb9\xc7\xd5\x6e\xb5\xd8\x2e\xef\xe6\xda\x5d\xb3\xb4\x61\x7e\x8d\x17\xf8\x0d\xff\xe0\x6f\x85\xbf\xf0\x07\x7e\xff\x46\xbd\xc5\x4e\x5c\x01\x3f\x91\x2f\x4b\xc4\x72\x12\xc4\xd4\xe7\x07\xa2\xc4\x3f\xdb\xaa\x62\xd2\x54\xdd\x2b\xd6\x47\xfb\x8a\x7e\xa0\x1e\x26\x6f\x1b\xaf\xd5\x88\x89\x2e\x83\xd2\xa1\x0e\x18\xf5\xe9\xe8\x7f\x26\x56\x0c\x3f\xc1\x84\x7e\xd6\x53\x91\x76\xd1\xd3\xbb\x2e\xa7\x70\x7c\xb9\xbb\xdc\xd0\xf3\x54\x6a\x41\x9a\x32\x0d\x18\x75\x04\x1f\xa7\x0a\x31\x3d\x41\x80\x11\x37\x4a\x23\x71\x2b\x75\xb1\xd9\x08\x49\x93\xdf\xf8\x20\xff\x89\x00\x09\x0d\xb5\x80\x11\x0d\x19\x9d\x23\x23\x49\x19\x0a\x97\xe9\x58\x47\x64\x33\x17\x1a\xc2\x3f\x73\x2a\xbd\x08\x56\xd7\xee\xea\x61\xd7\xff\x06\x44\x56\x48\x36\x1d\xbc\x96\x73\x96\x43\x6e\xd4\x33\x1c\xe3\x57\x29\xc3\x1a\x27\x72\xc7\xc9\x2c\x62\xba\x1e\x7f\xf7\xd5\x3b\x8d\x4e\xe9\x8a\xe9\xba\x19\xf6\x23\xab\xfd\xfd\x7a\x73\xef\x52\xec\xff\x02\x00\x00\xff\xff\x2c\x0f\x4b\xa1\x0d\x09\x00\x00")

func callbackHelpTmplBytes() ([]byte, error) {
	return bindataRead(
		_callbackHelpTmpl,
		"callback/help.tmpl",
	)
}

func callbackHelpTmpl() (*asset, error) {
	bytes, err := callbackHelpTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "callback/help.tmpl", size: 2317, mode: os.FileMode(436), modTime: time.Unix(1502503862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _callbackIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xc1\x8a\x13\x41\x10\x86\xef\x79\x8a\xa2\x4e\x7a\xd8\x6d\xd6\x73\xcf\x80\x37\x45\x10\x6f\x1e\x43\x67\xba\x92\x0c\x99\x9e\x0e\x33\x3d\xc1\x10\xe6\x90\xdd\x83\x07\x45\x16\x4f\xde\xc4\x37\x08\xeb\x86\x0d\x1b\x93\x67\xa8\x7e\x23\xe9\x99\xd1\x8d\xb0\x62\x96\xf5\x12\x3a\xf5\x57\x75\x7d\xff\xcf\xb4\x1c\xda\xc2\x80\x4a\x5c\x6a\xf3\x08\x85\xd2\xba\x9f\x14\x06\xc1\x90\x1b\x5b\x1d\xe1\xd4\x96\x0e\xe3\x1e\x80\xd4\xe9\x0c\x92\x4c\x95\x65\x84\xd5\xe4\xc4\xa8\x62\x94\xe6\x8d\x02\x20\xd3\x7c\x5a\xb9\x03\xb5\xf9\x8f\xe0\xe6\x53\x8a\xd0\xd1\x3b\x87\x90\x2b\x43\x11\x86\x5f\x84\x99\xca\x2a\x8a\x10\x61\x9a\xa9\x84\xc6\x36\xd3\x54\x44\xc8\x9f\xf9\x8a\xd7\x7c\xcd\x1b\x7f\xce\x6b\xe0\x1d\xaf\xf8\x86\xaf\x78\xc5\x3b\xde\xf0\x1a\x21\xd5\x11\xb6\x2c\x42\xa7\xb3\x7f\x42\x95\x94\x51\xe2\xba\xc5\x49\x61\xfa\x01\x07\x0f\xda\xdb\x86\x83\x7b\x9b\x31\x3b\x0d\x59\xfc\x62\x3c\xc3\xf8\xcc\x2f\xa5\x68\xab\x7f\x69\x7a\x86\x31\x5f\xf2\x0f\xde\xff\xd9\x27\x45\xbb\xe1\x78\xe4\xa3\x73\x2c\xab\x81\xb6\x46\xa5\xf9\x91\x61\xfa\xa5\x5f\xfa\x0f\xbc\xe5\x5b\x7f\x01\x7c\xc9\x5f\xf9\xcb\x83\xf3\xcc\xd4\x80\x32\x18\xda\x22\x4c\xb5\x7e\x81\xb7\xbc\xe7\xef\xbc\xe1\x9d\x14\x8d\xfe\x50\x23\xca\xd8\x7e\x66\x47\x47\x1b\x79\xf4\x57\x71\xaf\x8b\x5b\xde\xfa\x4f\xfe\x3d\x3c\x7f\xf3\xf2\x11\x3e\x26\x34\xff\x9f\x2e\x06\x95\x73\x36\x3f\x58\xde\x15\x7e\x9f\x4e\xca\x2a\x49\xa8\x2c\x31\xe6\x6f\xbc\xe7\x1b\xbe\xe6\x95\x3f\xf7\x1f\xa5\x68\xf5\xb8\x27\x45\x78\xde\x71\xaf\xd7\x93\xdd\xad\x8b\x05\x14\x2a\x1f\x11\x9c\x26\x85\x29\xa1\xae\x5b\x9f\x9d\xda\x9c\x15\x8c\x0b\x1a\x46\x28\x48\xa7\x4e\x2c\x16\x70\xfa\x96\x06\x2f\xac\x9d\xbc\xa2\x39\xd4\x35\xc6\xa1\xf4\x5a\x19\x82\xba\x96\x42\xc5\xf0\xe4\x6e\x44\x53\x46\x8e\xee\x1b\xf2\x17\x01\x8f\xb7\x21\x81\x80\xa8\xe2\xa7\xdd\x23\xb9\x23\xa3\x5c\x07\xa2\xae\xf4\x33\x00\x00\xff\xff\x94\xff\x98\x4d\x9b\x04\x00\x00")

func callbackIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_callbackIndexTmpl,
		"callback/index.tmpl",
	)
}

func callbackIndexTmpl() (*asset, error) {
	bytes, err := callbackIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "callback/index.tmpl", size: 1179, mode: os.FileMode(436), modTime: time.Unix(1502499738, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _callbackLayoutTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xb1\x4e\x03\x31\x0c\xdd\xef\x2b\x42\xf6\x36\x3f\x90\xcb\x02\xcc\x30\xb0\x30\xa6\x39\x97\x73\x9b\xa6\x55\x9c\x3b\xa9\x8a\xee\x03\x90\x90\x18\xf8\x00\x7e\xa1\x62\x05\xfa\x0d\xe9\x1f\xa1\x36\xa5\x2d\x07\x42\x30\x39\xb1\xfd\x9e\xfd\x6c\xcb\xb3\x8b\xab\xf3\x9b\xdb\xeb\x4b\x56\x87\x99\x55\x85\xcc\x86\x31\xc6\x64\x0d\xba\xca\xcf\xdd\x37\x60\xb0\xa0\xa4\xc8\xf6\xe8\xb7\xe8\xa6\xcc\x83\x2d\x39\x85\xa5\x05\xaa\x01\x02\x67\xb5\x87\x71\xc9\x85\x21\x12\x0d\x4e\x31\x0c\x67\xe8\x86\x86\x88\x33\xf1\x6f\xec\xc0\x07\xfb\x33\x9e\x8c\xc7\x45\x60\xe4\x4d\xc9\xc5\xe4\xb4\xd4\x84\xb8\x92\x22\xc7\xf7\x7a\xc4\x51\x90\x1c\xcd\xab\xa5\x2a\x64\x85\x2d\x33\x56\x13\x95\xbc\x99\x0e\xcc\xdc\x05\x8d\x0e\x3c\xdf\x66\xc5\x88\x63\x36\x04\xef\xe7\xbe\xeb\x7a\x99\xda\x82\x0f\x5c\xc5\x78\x88\x8b\x0a\x5b\x15\x23\xb8\xaa\xeb\x0e\xe0\x19\x10\xe9\x3b\xf8\x05\x7e\xcc\xe8\x11\x48\xa7\x4f\x11\x4e\xb7\x23\x9d\xfb\xda\xf5\xdf\xd8\x6f\xc1\xad\xe1\x5f\x66\x7b\x5a\xd1\x04\x6c\x81\x2b\xa9\x3f\xa7\xcb\x55\x7a\x4a\xaf\x69\x95\x5e\xd2\x7b\x5a\x6d\x1e\xa5\xd0\x4a\x0a\x8b\x7f\x67\xa8\xc1\x2e\xb8\x4a\xcf\x69\x9d\xde\xd2\x7a\x73\xbf\x79\xe8\x73\x48\xd1\xec\x8e\x49\x0a\xa7\xdb\xec\x8c\x91\x2d\x11\x6c\xc5\xba\xae\xc8\x9a\x8b\x62\xbf\x9e\xfd\x4e\x44\x3e\xc1\x8f\x00\x00\x00\xff\xff\x8f\x82\xaf\xe7\x9a\x02\x00\x00")

func callbackLayoutTmplBytes() ([]byte, error) {
	return bindataRead(
		_callbackLayoutTmpl,
		"callback/layout.tmpl",
	)
}

func callbackLayoutTmpl() (*asset, error) {
	bytes, err := callbackLayoutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "callback/layout.tmpl", size: 666, mode: os.FileMode(436), modTime: time.Unix(1501928863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x4f\x6f\xdb\xc6\x13\xbd\xeb\x53\x0c\xf6\x87\x00\x36\x10\x89\x4e\x82\x5f\xff\x81\x24\xe0\xa4\x41\xe1\xa0\x0e\xea\xda\x6d\x8f\x06\xa5\x5d\xc9\x84\x28\xae\x4a\x52\x8e\xdd\x20\x80\x2c\x23\x75\x0a\x19\xf5\xa5\xa7\x16\xe9\xb9\x47\x4a\x96\x20\xc6\xb2\x98\xaf\x30\xfb\x8d\x8a\x59\x49\x16\x05\xab\x76\xe4\xb6\x97\xde\xa4\xdd\xd9\x9d\xb7\xef\xcd\xbe\x59\x9a\x65\x19\xd4\xa0\x26\xa2\x3d\xc9\x2d\x56\x97\x61\xc4\xc0\x29\x45\xae\xf4\x2d\x66\x08\xee\x46\xc6\xcb\x97\x50\xa8\x04\xb2\x51\x2f\x7c\x5b\xdd\xf8\x1c\x5e\xbd\x62\x76\x2e\x07\x00\x60\x96\x5d\xe1\xf1\x50\x44\x50\xf2\x9c\x30\xb4\x58\xa3\x9a\x9f\x0e\x31\x5b\x87\xe8\x30\x4f\x54\x84\xcf\x6d\xfc\x05\x53\xec\x60\x8c\x5d\x4c\x54\x4b\x9d\x02\xbe\xc7\x18\x3b\x38\xc4\x04\x2f\x4c\x63\x12\x35\x5b\xc6\xdd\xfd\xcc\xc6\x35\x27\xa8\xb8\x7e\x66\x5b\x00\xd3\xf5\xeb\x8d\x6c\x72\xfd\x9f\x81\xef\xd4\x84\xc5\xea\x8d\xa2\xe7\x96\x76\x5d\xce\x20\x3a\xac\x0b\x8b\x45\xe2\x20\x62\xb0\xef\x78\x0d\x61\xb1\xeb\x87\x82\xba\xe7\x94\xc4\x9e\xf4\xb8\x08\x2c\xb6\xc1\xe7\xe0\x61\x9c\x3d\x90\xc1\xdd\xfd\xa5\x80\x7a\x4e\x51\x78\x90\xa5\x49\x06\xb5\xbc\x1e\x65\x50\x96\x81\xc5\x98\x8d\x7f\x4c\xd2\xa5\x38\x02\x7c\xaf\x9a\x98\xe2\x25\xa6\x78\x81\x29\xf6\x30\x86\x15\x1c\x61\xac\xc7\x13\xbc\xc4\xbe\x6a\xde\x07\x86\x6f\xf1\xb7\xfc\x3d\x9e\xbf\xc7\x19\xe4\x01\xbb\x7a\xe2\x48\xb5\x30\x85\x7b\x1c\xb0\xa3\x8e\xb1\x87\x7d\xd5\xa2\xb3\xa4\xd8\xd3\x53\xc4\xff\x10\xfb\x38\x52\x6d\x3d\xac\x9a\xea\x0c\x7b\x3a\x4d\x57\xb5\xf1\x1d\xe0\x48\x67\xee\xab\x26\x68\x10\x03\xd5\xc6\x73\xd5\x54\x6d\xf5\x06\x63\xc0\x04\x32\x59\xf4\xbe\x43\x75\x8a\x03\x5a\x8e\xb1\x6a\x61\x1f\x87\xea\x6c\xd5\x34\xf4\xe9\x6c\xb3\x18\x2c\x21\x59\x20\x6b\xb2\x24\xb9\xd8\x8d\x44\xad\xee\x39\x91\x58\xa0\xd7\x57\x14\xf4\x44\x72\xb1\x33\x89\xd1\xe2\x65\x25\x9e\x13\xf2\x16\x5a\x99\x7d\x57\x35\x97\x10\x33\x55\x2d\xec\x92\x0e\xc4\xdf\x08\x63\x50\x47\x98\xd2\x65\x50\x3f\x91\x10\x98\x60\xff\x2f\x99\x9c\x12\x99\x05\x40\xc7\x74\x02\xe1\x4c\x68\x73\xfc\xf0\x85\x08\x32\x9c\xcd\xa0\x4d\x23\x19\xb8\xdc\x62\x0c\x02\xf9\x22\xb4\xd8\x83\x35\x66\xcf\x08\xdd\xf0\xcb\x32\xc3\xa5\x69\x4c\x17\xfd\xfd\x8a\xbf\x91\x23\xba\x62\xe7\xea\x18\xcf\x71\x98\xd7\x75\x39\xc4\x44\xfd\xa8\xda\xb0\xb2\x17\x45\xf5\xf0\x33\xc3\xe0\xb2\x14\x16\x2a\x52\x56\x3c\x51\x28\xc9\x9a\x11\xd6\x03\xe1\xf0\x70\x4f\x88\x28\x34\xb8\x61\x16\xed\x07\x4f\xb7\x9e\xad\x6f\x07\x9f\x3e\x69\x3c\xf6\xd6\x4b\xdb\xb5\x7d\xef\x99\xfc\x62\xeb\x87\xef\x9d\x6f\x36\x0f\x36\xab\xeb\xdf\x3d\xfc\x7a\x63\xf7\xe1\x27\x1f\x3d\xda\xfc\xf2\xf1\x96\x69\x14\x6d\xed\x68\xff\xab\xb8\xdc\x5a\x5b\x05\xd3\x81\xbd\x40\x94\x2d\xf6\x81\xf9\x66\x94\x6d\xd3\x90\xb6\x0d\xbd\x21\xb3\xf1\x77\xd5\xc2\x0b\x7d\x49\x5a\xea\xd4\x34\x1c\x7b\x91\x6e\x37\x16\xbf\x4e\x73\xbb\x5d\xcd\x52\x2f\x70\xac\x39\x3a\x3b\x53\x42\xff\x01\xeb\xba\xb9\xd8\xdf\x62\x8c\x03\x2a\xda\x69\x2d\x53\xe2\xa3\x71\xb9\x77\x67\xa8\xb0\x47\xf7\x4e\x1d\x93\x7f\xe0\x88\x0a\xfc\x8e\x24\xd1\xef\x0f\xa1\xe9\xb9\x53\x13\xd7\x89\xba\x3b\xdc\x7f\x9d\xc8\x5f\x71\xa8\x7e\x56\x27\x73\xfe\xa0\x91\x75\x09\x5b\x8f\xfc\xe0\xba\x77\xbc\x5b\x9a\xc5\xfd\xea\x6e\x55\x1c\xde\xda\x17\xd7\x4b\x25\x11\x86\x3b\xb2\x2a\xfc\x05\x2c\xde\x84\xf5\x3a\x51\xb9\x25\xa8\xba\x22\x4b\xd3\x42\xf0\x34\xc4\x79\x53\x65\xd8\xc1\x3e\x99\xe5\x95\xb7\x52\xdb\x3a\xc7\x94\xc1\xb8\x51\x6a\x9f\x4f\xf4\xef\x11\x26\xea\xac\x00\x2b\xff\x07\x75\x82\xb1\x06\xdc\x5d\x5d\xc0\x5a\xd6\x5a\xe7\x0f\x9b\x4e\x5b\xa7\x3a\xa5\x42\xa0\x46\x72\x4c\x43\xaa\x8d\x97\xf7\x81\x0e\x4e\x45\x04\xea\xb5\xc6\x93\x8c\x63\x3a\xaa\x49\x3e\x4e\x2f\x9d\x01\xe1\x50\x27\x33\xb7\x4f\x70\x00\x54\x65\x63\xb3\xd7\xc6\x3f\x52\x6d\xf5\x5a\x83\xd7\x3b\x53\xa3\xea\xe3\xc5\x62\x37\x1f\xeb\xe8\xcb\xc8\x2d\x1f\xee\x8e\x05\x24\x83\xbf\xe2\x0a\x4a\xd2\x0b\x2d\xf6\x68\x6d\xb1\xe5\x3f\xd7\x0b\x77\xc4\x41\x74\xb3\xe1\xdf\x59\x34\xe1\xf3\x05\x9a\x2d\x16\x06\xe8\x1d\x31\xd0\xef\x92\xbe\x6a\xaa\x37\x13\x92\x92\x05\xaf\x8f\x02\xac\x50\x24\x7c\x4c\x97\x61\x84\x7d\x7a\xad\xf4\x68\xf9\xb8\x9f\x8f\x48\xde\xe9\xa6\x3d\x9a\x9e\x14\xa4\x1e\x18\x3f\x9d\x06\x18\xff\x17\xa4\x17\x3e\xcf\xe8\x3e\xa5\xfb\x16\xd9\x9f\xfa\x7c\x19\xcd\x8b\x8d\x28\x92\x7e\x06\xc4\x78\x80\xba\x1d\x76\xf4\x75\x9b\xbc\xe4\x4d\x63\x3c\x43\xd7\x7c\xf2\x69\x60\x4c\x3f\x04\xec\x5c\xce\x34\xc8\xeb\xec\xdc\x9f\x01\x00\x00\xff\xff\x07\x63\x1e\xa5\x6b\x0c\x00\x00")

func editTmplBytes() ([]byte, error) {
	return bindataRead(
		_editTmpl,
		"edit.tmpl",
	)
}

func editTmpl() (*asset, error) {
	bytes, err := editTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.tmpl", size: 3179, mode: os.FileMode(436), modTime: time.Unix(1502228936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func errorTmplBytes() ([]byte, error) {
	return bindataRead(
		_errorTmpl,
		"error.tmpl",
	)
}

func errorTmpl() (*asset, error) {
	bytes, err := errorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.tmpl", size: 0, mode: os.FileMode(436), modTime: time.Unix(1496522760, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _healtsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xce\xb1\x4a\x03\x41\x10\x06\xe0\x3e\x4f\x31\x04\xeb\x5d\x48\xbd\x6e\x95\xe6\x6a\xc1\x7e\x75\xe7\xdc\xc3\x63\x2f\xec\x46\x52\xfc\x4c\x63\xe5\x53\xe8\x33\x04\x0c\x1c\x0a\x3e\xc3\xe4\x8d\x64\x3d\x43\xaa\x61\x86\x7f\x3e\x7e\x80\x0e\xc3\x3e\x91\xe1\x52\xa6\x52\x49\x64\xe5\xd2\xc6\xeb\xfb\xf9\x4d\x67\x3d\xea\x97\xce\xce\xa6\x8d\x5f\x01\x54\x42\x7e\x62\x32\x2d\xb2\xf3\x04\x90\x69\x71\x80\x38\x47\x12\x01\x38\xc7\xcb\xff\x87\xfe\xe8\x51\x4f\xfa\xa9\xf3\xf9\x55\x4f\xfa\x7d\x75\xfe\x99\x32\x1d\xea\x42\x01\x43\x4f\xa6\xcb\xfd\x74\xc7\x39\x72\xfc\xa3\xc6\xca\x22\xe4\x02\xa5\xc2\xfd\xed\xda\xee\x5e\x1e\xc6\xe1\xb1\x5a\x80\x6e\xcc\xb2\x74\x5b\x12\xb1\x89\xc3\xb8\x6f\x77\x73\xff\xdc\x6d\x45\xd6\x1e\x30\x22\xce\x86\xd6\x71\xa9\x74\x99\xbf\x01\x00\x00\xff\xff\xca\x21\x47\x0a\xee\x00\x00\x00")

func healtsTmplBytes() ([]byte, error) {
	return bindataRead(
		_healtsTmpl,
		"healts.tmpl",
	)
}

func healtsTmpl() (*asset, error) {
	bytes, err := healtsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "healts.tmpl", size: 238, mode: os.FileMode(436), modTime: time.Unix(1502451001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x4a\x33\x31\x14\x85\xf7\x79\x8a\x4b\x56\xff\xbf\xe8\x64\xaf\x69\x56\x6e\xdc\x8b\x1b\x11\x49\x27\xd1\x0e\xbd\xb4\x65\x92\x59\x48\x0c\xd8\xee\x04\xc1\x8d\x0f\xa0\xf8\x02\xb5\x58\x28\x8a\xf3\x0c\x37\x6f\x24\x69\xa7\xda\x95\xae\x02\x87\x7c\xe7\x9e\x73\x98\xd4\x50\xa2\x76\xae\xcf\x9b\x51\x6f\xd0\x78\x3f\x19\x73\x18\xd6\xf6\xb2\xcf\x85\x36\xe6\x62\xda\x0c\xb0\x2a\xb9\xa2\x47\x6a\xe9\x95\x16\xb4\xa4\x75\x9a\xa7\x7b\x48\x33\x6a\xb3\x94\xee\x68\x95\x66\x69\x4e\x4b\x6a\xa5\xd0\x8a\x31\xe9\xfc\x35\x5a\xc5\x0a\xa3\xc7\x57\xb6\x86\xc0\x00\xca\x09\x4e\xea\x03\xa8\xad\x39\x64\x91\x49\xd1\x7d\x61\xb2\xc1\xbd\xfb\x58\x39\x0f\xdd\xdb\x73\x53\x5d\x5a\xae\x42\xa8\xb3\x0d\x14\xdb\x24\x2e\x46\x26\xb1\x52\x52\xef\x52\x76\xba\x08\xa1\x38\x1d\x1d\x1f\xc5\x98\x99\xe2\xa4\xf2\x68\x63\x84\x7f\xdf\xf2\xff\x9c\x0e\xe0\xec\x87\xb4\xa6\xf2\xfb\x18\x3d\xd1\x8a\xde\x68\x41\xef\x69\x4e\xeb\x74\x4b\x2d\x2d\x69\x91\xdb\x6e\xd0\x1b\xf8\xe5\xa8\x30\x16\xad\xb7\x7c\xd7\x66\xdb\x9d\x2b\x7a\xd9\x38\x7e\x6c\x57\xcb\x3e\xe7\x7f\x18\x0d\xad\x46\xef\xb8\x02\x7a\xa6\x76\xb3\x6c\x9b\x1e\xe8\x93\xd6\xb4\xca\xb8\x14\x58\x29\x16\x82\x1d\x9b\x18\xa5\x68\x50\xb1\xaf\x00\x00\x00\xff\xff\x2f\x14\x7b\x82\xc5\x01\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 453, mode: os.FileMode(436), modTime: time.Unix(1500501032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x41\x6e\x2a\x31\x0c\xdd\xcf\x29\xf2\xb3\x87\x5c\x20\x93\xcd\xff\x7f\xdd\x2e\xba\xe9\x32\x64\x0c\x63\x08\xa1\x8a\x33\x23\xa1\x68\xa4\xb6\xf7\xa8\x7a\x05\xba\xa3\xad\xd4\x33\x84\x1b\x55\x10\x0a\x03\x45\x95\xba\x72\x62\xbf\x67\xfb\xd9\x96\x7f\xfe\x5d\xfd\xbd\xb9\xbd\xfe\xcf\xea\x30\xb7\xaa\x90\xd9\x30\xc6\x98\xac\x41\x57\xf9\xb9\xfb\x06\x0c\x16\x94\x14\xd9\x1e\xfd\x16\xdd\x8c\x79\xb0\x25\xa7\xb0\xb4\x40\x35\x40\xe0\xac\xf6\x30\x2e\xb9\x30\x44\xa2\xc1\x19\x86\xe1\x1c\xdd\xd0\x10\x71\x26\x7e\xcd\x1d\xf8\x60\x2f\xf3\xc9\x78\xbc\x0b\x8c\xbc\x29\xb9\x98\xf6\x4b\x4d\x89\x2b\x29\x72\x7c\xaf\x47\x1c\x05\xc9\xd1\xa2\x5a\xaa\x42\x56\xd8\x32\x63\x35\x51\xc9\x9b\xd9\xc0\x2c\x5c\xd0\xe8\xc0\xf3\x2d\x2a\x46\x1c\xb3\x21\x78\xbf\xf0\x5d\x77\x86\xd4\x16\x7c\xe0\x2a\xc6\x43\x5c\x54\xd8\xaa\x18\xc1\x55\x5d\x77\x20\xcf\x81\x48\x4f\xe0\x07\xfa\x11\x71\x96\x40\x3a\xdd\x67\x38\xdd\x8e\x74\xee\x6b\xd7\x7f\x63\xbf\x05\xb7\x86\x9f\xcc\xb6\x5f\xd1\x04\x6c\x81\x2b\xa9\xbf\xa6\xcb\x55\x7a\x4e\xab\xf4\x92\xde\xd3\x3a\xbd\xa5\xb5\x14\x5a\x49\x61\xf1\x24\x43\x0f\x4f\x10\x02\xba\x09\x71\x95\x9e\xd2\x6a\xf3\xb0\x79\xdc\xdc\xa7\x8f\xf4\x7a\x89\x2b\x45\xb3\x3b\x22\x29\x9c\x6e\xb3\x33\x46\xb6\x44\xb0\x15\xeb\xba\x22\x6b\x2d\x8a\xfd\x5a\xf6\xbb\x10\xf9\xf4\x3e\x03\x00\x00\xff\xff\x1b\x32\xb8\x1f\x92\x02\x00\x00")

func layoutTmplBytes() ([]byte, error) {
	return bindataRead(
		_layoutTmpl,
		"layout.tmpl",
	)
}

func layoutTmpl() (*asset, error) {
	bytes, err := layoutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.tmpl", size: 658, mode: os.FileMode(436), modTime: time.Unix(1496675495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loginTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x4f\x41\x0e\xc3\x20\x0c\xbb\xf3\x8a\x28\x77\xd4\xfb\x04\xfd\x0b\xa2\xb4\x8b\x0a\x01\x95\xb4\xda\x7e\x3f\x41\xa5\xad\x1d\x07\x94\xd8\xc6\x36\x4a\x99\x89\x0e\xf0\xd1\xd5\x6a\x71\x5f\xb5\x8b\xb4\xb0\xf6\x81\x25\x6c\x38\x2a\x00\x33\xe7\x2d\x41\x0a\xf2\xcc\x93\xc5\x92\xab\x9c\xf0\xfd\x59\x72\xdb\x42\xdc\x99\x76\xfe\x58\xe2\x48\x1c\xbe\x6c\x57\xd4\xe2\xf8\x22\x69\x29\x9a\x7c\x66\xb8\x2e\x7a\x8e\x54\xb0\x41\x6d\xb3\xd8\xee\x07\xc4\xec\x57\x1c\xcd\xd0\x2c\x6e\x9e\xc4\x65\x97\x5b\x6e\xd9\x05\x81\x5d\x0a\x16\x8b\xab\x15\x41\xde\x25\x58\x94\xf0\x92\x5f\xd9\x61\xa2\xa3\xff\xe9\x1c\x94\x19\x5a\x81\x3e\x74\xe0\x13\x00\x00\xff\xff\x2a\xc4\x98\xf4\x25\x01\x00\x00")

func loginTmplBytes() ([]byte, error) {
	return bindataRead(
		_loginTmpl,
		"login.tmpl",
	)
}

func loginTmpl() (*asset, error) {
	bytes, err := loginTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login.tmpl", size: 293, mode: os.FileMode(436), modTime: time.Unix(1496954960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raffleTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6e\xd3\x30\x18\xc7\xef\x79\x0a\x2b\xa7\x71\x68\x72\x2f\x49\x76\xe1\xb2\x03\x30\x09\x89\x6b\xe5\x26\x5f\xdb\x28\xae\x53\xd9\x0e\x08\x59\x96\xd6\x54\x02\x0e\x7b\x04\x34\x5e\xa1\xdd\x88\x54\x56\xd6\xbe\xc2\xdf\x6f\x84\x52\xca\xe0\x04\x3b\xd9\xfa\xfc\xc9\xbf\xdf\xff\x9f\x70\x96\x0b\xae\x75\x1a\x36\xd5\x60\xdc\x18\x53\xcb\x90\xcd\x14\x4d\xd2\x30\xd6\xb3\x66\x32\x11\x14\x5b\x1b\x29\xde\xdf\xa2\xd7\xef\x25\xa9\x8b\x17\xce\x8d\xfe\xcc\x2e\x6b\x6d\xfa\x51\x98\xe1\x2b\x3a\x7f\x85\x0e\x3f\xd0\xf9\xcf\x58\xfb\xd6\x5f\x33\x1c\xb0\xc7\x06\x1d\xbe\x61\xeb\x5b\x74\xd8\xa1\xc3\xf7\x24\xe6\x59\xf0\x2f\xf6\xaf\xcf\xf5\x13\xd9\xe7\xcd\xa2\xe0\x86\x52\xa3\x1a\x0a\x33\xdc\x60\x83\x07\xec\x71\xdb\x23\xfd\x35\xf3\x4b\x1c\xb0\xf5\x4b\xec\x71\xcf\xfc\xca\x7f\xc2\xda\x2f\x7d\x8b\x07\x6c\x71\xdf\xef\xfd\x57\x47\x93\x2c\x46\xa6\x1e\xe9\x19\x91\x39\x2f\x8b\xf4\xc9\x9d\xdc\xf8\x16\x07\x7f\x85\xf5\xa3\x0d\x6e\x19\xee\xfc\x0a\x77\xd8\x0d\x7c\x8b\x35\x36\xd8\x61\xeb\x3f\xfa\xd5\x51\x23\x08\x92\x46\xfc\x65\x22\x4a\x6d\xd8\xe9\x1c\xe8\x05\xcf\x29\xcc\xac\x55\x5c\x4e\x89\xfd\xe6\xbd\xa4\xf9\x98\x94\x76\x2e\x48\x44\xc9\xac\x2d\x27\x2c\xba\x90\x93\xfa\x0d\xc9\x82\x0a\xe7\xb4\xf9\x20\x28\x0d\xc7\x3c\xaf\xa6\xaa\x6e\x64\x31\xc8\x6b\x51\xab\xe1\x54\x11\xc9\xe7\xa1\xb5\x24\x0b\xe7\xb2\x84\x9f\xf2\xce\x8c\x59\xe8\x61\x1c\xbf\xab\xa2\xbc\x9e\xc7\x65\x61\x6d\xf4\xb6\x3a\x26\x62\x86\xab\x29\x99\x34\x1c\x8d\x05\x97\x55\xef\xc2\xa2\x57\x7c\x4e\xcc\x39\x76\x56\x16\xc3\xc7\xd5\x67\x7d\x1c\x76\x86\x2f\xe8\x8e\x6d\xef\x87\xcc\xda\xe8\x52\xf0\x9c\x8e\x8f\xa2\xcc\x82\x13\x39\x89\x1b\x91\x05\x3f\x03\x00\x00\xff\xff\xd4\xc2\x02\x96\x8c\x02\x00\x00")

func raffleTmplBytes() ([]byte, error) {
	return bindataRead(
		_raffleTmpl,
		"raffle.tmpl",
	)
}

func raffleTmpl() (*asset, error) {
	bytes, err := raffleTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "raffle.tmpl", size: 652, mode: os.FileMode(436), modTime: time.Unix(1501267293, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rafflesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcd\x6a\xdc\x30\x10\xc7\xef\x7e\x8a\xa9\xe8\xd5\x76\xb6\xb4\x97\x20\x1b\x02\x69\xa1\x50\x68\x49\x68\xaf\x41\x59\xcd\x66\x4d\xb4\xb2\xb1\xe4\xa6\xc5\x18\xd2\x5c\x52\x48\xa1\x97\x9c\xfb\xf1\x06\x4e\xda\xd0\x25\x61\x37\xaf\x30\x7a\xa3\x22\x7b\x93\x38\xa4\x87\x9e\x6c\x49\xf3\xf1\xfb\xcf\x7f\xf8\x74\x94\xd2\x0f\x5a\xd2\x1f\x77\x42\xbf\xdc\xa1\x3b\x71\x9f\x69\x0e\x74\x4d\x2d\x9d\xd1\x15\xcd\xe9\x92\x5a\xa8\xeb\xa8\xa8\x76\x55\x36\x8e\xde\xed\xbf\xdc\x6c\x1a\x1e\x4f\x47\x69\x10\xf0\x47\x61\xc8\x27\x79\x39\x83\xb1\x12\xc6\x24\xac\xda\x0f\xfd\x91\xc1\x0c\xed\x34\x97\x09\x2b\x72\x63\x19\x88\xb1\xcd\x72\x9d\xb0\x58\x48\xb9\x53\x8a\xc9\x44\x21\x4b\x83\x00\x00\x80\x4f\x32\x54\xd2\xa0\x05\x29\xac\x08\xab\xfd\x70\x26\xca\xbd\x4c\xa7\xdd\x6b\x17\xa1\x70\x0f\xb5\x4c\xe9\x94\x96\x74\x46\x2d\x9d\xd3\xdc\x1d\xb9\x2f\xe0\x0e\xef\x63\xf3\x78\x15\x79\x97\x9a\xe9\xa2\xb2\xa0\xc5\x0c\x13\xd6\xf7\xdd\xa9\x4a\xc5\xc0\x7e\x2c\x30\x61\x16\x3f\x58\x06\x85\x12\x63\x9c\xe6\x4a\x62\x99\x30\xfa\xe9\x3e\xb9\x13\xba\xea\x54\xd3\x82\xda\x07\x5d\xd8\xa0\xfc\x6e\x65\x6d\xae\x07\xe2\xfb\x0b\xf6\x80\x95\xc7\xfd\x4b\x9f\xcb\xe3\x1b\xd1\x7e\x86\xb1\x9f\x58\x1a\x86\xfe\xbf\x52\x83\x62\x2a\x33\x16\x56\xdf\xd0\x14\x62\x8c\x2c\xad\xeb\x52\xe8\x3d\x84\x1b\x3b\xb6\x3a\x51\xa6\x69\x02\xae\xb2\x94\x0b\x98\x96\x38\x49\x58\xdc\x8b\x35\x71\x5d\x47\xaf\x0f\x34\x96\xde\xb4\x9d\xba\x8e\xde\xe4\xc6\xfa\x7f\x5f\x29\xda\xb6\xa2\xb4\x9b\xc2\x62\xf4\x22\x2f\x67\xc2\x02\x5b\x1b\x45\x6b\x4f\x98\xf7\x57\xa4\x3c\x56\x59\x1a\xd4\x35\x6a\xe9\x2f\x2a\x95\x06\x41\xc0\x65\xf6\xde\x8b\xe0\xfe\xe8\xb5\xdc\x02\xf5\x1d\x5f\x65\xc6\xae\x60\xe0\x8e\xa6\x87\xf5\x34\xf0\x78\xb8\x48\xd0\x34\xf1\x14\x85\xb2\xdd\x53\xf4\xd6\x78\x50\xf0\x74\x40\xdf\xdc\x11\x5d\xbb\xc3\x6e\x86\x57\x74\x41\x0b\x5a\xae\x83\x8f\xda\x46\x2d\x51\x6e\xd8\xfb\xd0\x30\x7a\xb6\xbe\xf6\x94\x41\xd3\x00\x7d\xf7\x9e\xb9\x63\x3f\x7a\x6a\x6f\x13\xb3\x09\x44\x5b\x28\x24\x4a\x1f\xf3\xbb\xdb\x6a\x40\x65\xb0\xcb\x59\xd0\x85\x3b\x82\x95\xda\xa0\xeb\x7e\x4e\x17\xee\x78\xd0\xd9\x17\xd8\xd0\xe6\x00\xcb\xff\x28\xd1\xa3\x5a\x61\x2b\x03\x4d\x13\x01\x9d\x52\xeb\x71\x80\x96\x74\x49\x4b\x5a\xb8\xe3\x8e\x6d\xee\xbe\xf6\xb2\x9e\x6b\xf9\x0f\x2b\x60\xe8\x45\x3f\xef\x9e\xd0\x6f\x91\xf7\x80\xc7\x9d\x23\x7f\x03\x00\x00\xff\xff\x47\x89\xc3\x80\xc7\x03\x00\x00")

func rafflesTmplBytes() ([]byte, error) {
	return bindataRead(
		_rafflesTmpl,
		"raffles.tmpl",
	)
}

func rafflesTmpl() (*asset, error) {
	bytes, err := rafflesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "raffles.tmpl", size: 967, mode: os.FileMode(436), modTime: time.Unix(1502464402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _settingsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\xdf\x8a\xdb\x46\x14\xc6\xef\xfd\x14\x87\xb9\x4a\x21\xbb\x4a\x59\x4a\xa1\x48\x82\xbe\x43\xa1\x97\x66\xd6\x1a\xc7\x62\xb5\x92\x91\xc6\xeb\x84\x10\xb0\x65\xb2\x49\xb1\xc1\xbd\xee\x5d\xe9\x4d\x2f\xb5\xb6\x95\x28\xf1\x5a\x7e\x85\xef\xbc\x51\x99\x91\xbd\x75\x17\xf7\xcf\xb2\x6d\xc9\xdd\x68\x3c\x3e\xdf\x7c\xdf\xef\x1c\xc9\xed\x9d\xf9\xf8\x11\x0b\xce\x51\xf3\x08\x15\x3e\xa0\xe2\x11\x4f\xf0\x91\x73\x94\x84\xad\xdd\x5c\xa3\xc6\x7b\x94\xd8\xa0\x42\xf9\x94\xb0\x41\x81\xf7\x28\xb0\xb0\x4b\xe2\x31\x8f\x79\x8a\x35\x3e\xf1\xc4\x75\x7a\x67\x7e\xcb\x95\xd4\x4b\x55\xd7\x13\x4e\xd6\x53\x4a\xb7\xe5\x40\xf7\x04\x69\x99\x3e\x57\xda\x13\xed\xf3\x48\xc6\x17\xe2\xbe\x70\x8d\x05\x0a\xce\x79\xc6\x63\x9e\x93\x29\xbe\xe4\x09\x96\x58\x9f\x70\x8e\x02\x37\x58\xa3\xe2\x6b\x14\xfc\xc6\x75\xa4\xdf\x72\xbb\x49\x7a\x49\xb2\xa3\xc3\x24\x36\x42\xf2\x4a\xb5\x1b\x35\x9d\x5c\xa8\x58\xd0\xa5\xd2\xbd\x24\xf0\x44\x3f\xc9\xb4\xf0\x5b\x44\x6e\x18\xf7\x07\x9a\x3a\x91\xcc\x32\x4f\x0c\x2e\x4e\xec\xb3\x20\xfd\xb2\xaf\x3c\xa1\xd5\x0b\x2d\x28\x96\x97\xca\x13\x9d\x24\x50\x82\xfa\x91\xec\xa8\x5e\x12\x05\x2a\xf5\x04\x7e\x42\x8d\x15\xf1\x18\xb5\x31\x9c\xf3\x08\x85\x09\x84\xaf\x79\x4a\x26\x8b\x03\x27\x05\x5f\xa3\x42\xd5\x88\x9e\x0f\xb4\x4e\xe2\x03\xd5\xdd\xc6\xdd\xea\x24\x50\x5d\x39\x88\xb4\xf0\xf1\x33\x6a\x7e\x73\x57\x39\xe7\x99\xeb\x34\x67\xfc\x96\xeb\x18\xbf\x7e\xcb\x0d\xc2\xab\x83\x62\x97\x32\x7d\x1e\xc6\x8d\xd2\x1f\x03\x19\xf4\x03\xa9\x55\xbb\x2f\xb3\x6c\x98\xa4\xc1\x91\x3c\x1e\x92\x88\x29\x73\x3f\x91\x5f\x4c\x0e\xf6\xae\x06\x9d\xbd\x2f\x35\x0f\x3c\xc5\x47\xc2\x16\x05\x8f\x50\x63\xcd\xb3\xbd\xde\xbf\x14\x06\xd1\x5d\x1c\x4e\x10\x5e\x3d\x3c\x95\x38\xd1\x61\xf7\x65\xbb\x71\x78\x2c\x98\x48\x9e\xab\x88\xba\x49\xda\xc4\x60\x0f\xfa\xf8\x75\xd7\x87\x35\x36\x24\x70\x83\xd2\xb4\x2d\xe7\x58\xa0\xe4\xdc\x5a\x5f\xa2\x16\xcd\x80\x6c\x51\xe3\x16\x95\x5d\x1b\x03\xf3\x53\x7a\xf2\x15\xf1\x5b\x14\xa6\x87\xb0\xf8\xc2\x75\xac\xc8\x4e\xd0\x28\xc8\x54\xc9\x03\x17\xfb\xad\x3d\x83\xe6\xb6\x61\x70\x70\x25\xea\x24\x51\xe6\x89\xb3\x67\x82\xd2\x64\x98\x79\xe2\xcb\x67\xc2\x7f\xf5\x8a\x4e\x1b\x83\xf4\xfa\xb5\xeb\xec\xcb\xfc\xc7\x08\x1e\xcc\x40\xc5\xc1\x3f\x03\xa0\xe2\xe0\x48\xfe\xc7\x43\x26\xd4\x64\x26\xd0\x22\x19\xf1\xbb\xdd\x5b\xab\x22\xdb\x89\x1f\x78\x8a\x25\x8f\x78\xca\xef\x50\x9c\xd2\x13\x73\x92\xbe\x26\xac\xb0\x41\x69\x5a\x76\x65\xfe\x5e\xe3\x93\x51\x30\xa8\xf6\x45\x57\xe6\x67\xdb\xee\x8b\x66\x63\xbb\x1f\xf5\xc7\x60\xdc\x1b\xfb\x53\x8a\x2a\x0e\xbe\x53\x2f\xf4\x67\x8d\x31\x4e\x74\x5b\xb6\x87\x61\x1c\xab\xf4\x6f\x51\xc6\x72\x78\x9f\xa3\x9d\x86\x1a\x37\xfc\x43\xc3\xaa\x61\x68\xde\xa6\xb8\x7d\x4a\xfc\xd6\xac\xc8\x82\x5e\xf3\xec\xf7\xcf\x04\x4a\xf3\x6c\xba\xa0\x24\x9e\x63\x81\x35\xcf\xcd\x14\xda\x8f\x07\x4f\xec\x9c\xe5\x3c\xb6\xf4\x0d\xce\xdb\x23\x1d\xf0\xcd\x23\xd8\x59\x27\x7f\x35\x7e\xdf\x7e\x6f\x23\xf9\x3f\xd9\xfd\x16\x00\x00\xff\xff\xb5\xeb\x02\x27\xce\x07\x00\x00")

func settingsTmplBytes() ([]byte, error) {
	return bindataRead(
		_settingsTmpl,
		"settings.tmpl",
	)
}

func settingsTmpl() (*asset, error) {
	bytes, err := settingsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "settings.tmpl", size: 1998, mode: os.FileMode(436), modTime: time.Unix(1507589074, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _user_healtsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x28\x4a\xcc\x4b\x4f\x55\xd0\xcb\x4d\x2d\x2e\x4e\x4c\x4f\x2d\x56\xa8\xad\xe5\xaa\xae\x56\xd0\x73\x49\x2c\x49\xd5\x0b\xc9\x0f\xc9\xcc\x4d\xd5\x73\xcb\x2f\xca\x4d\x2c\x51\x50\x32\x30\xd4\x33\x30\x52\x30\x34\xb5\x32\x30\x51\x52\xa8\xad\x55\xa8\xae\xce\x4c\x53\xd0\x0b\x4a\x4d\x4c\x09\x2e\x49\x2c\x49\x55\xa8\xad\xb5\x49\xb2\xbb\x30\xff\x62\xc3\x85\x7d\x17\xdb\x2f\xec\xb8\xd8\x74\x61\xc3\x85\xbd\x17\xf6\xd9\xe8\x27\xd9\x55\x57\x2b\xa4\xe6\xa5\x40\x34\x29\xe8\x39\xe5\xa7\x54\x82\xd8\x36\x49\x45\x76\x5c\x70\x29\x2e\x40\x00\x00\x00\xff\xff\xd5\x04\xb0\xab\x8e\x00\x00\x00")

func user_healtsTmplBytes() ([]byte, error) {
	return bindataRead(
		_user_healtsTmpl,
		"user_healts.tmpl",
	)
}

func user_healtsTmpl() (*asset, error) {
	bytes, err := user_healtsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user_healts.tmpl", size: 142, mode: os.FileMode(436), modTime: time.Unix(1504780759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"add.tmpl": addTmpl,
	"callback/edit.tmpl": callbackEditTmpl,
	"callback/help.tmpl": callbackHelpTmpl,
	"callback/index.tmpl": callbackIndexTmpl,
	"callback/layout.tmpl": callbackLayoutTmpl,
	"edit.tmpl": editTmpl,
	"error.tmpl": errorTmpl,
	"healts.tmpl": healtsTmpl,
	"index.tmpl": indexTmpl,
	"layout.tmpl": layoutTmpl,
	"login.tmpl": loginTmpl,
	"raffle.tmpl": raffleTmpl,
	"raffles.tmpl": rafflesTmpl,
	"settings.tmpl": settingsTmpl,
	"user_healts.tmpl": user_healtsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"add.tmpl": &bintree{addTmpl, map[string]*bintree{}},
	"callback": &bintree{nil, map[string]*bintree{
		"edit.tmpl": &bintree{callbackEditTmpl, map[string]*bintree{}},
		"help.tmpl": &bintree{callbackHelpTmpl, map[string]*bintree{}},
		"index.tmpl": &bintree{callbackIndexTmpl, map[string]*bintree{}},
		"layout.tmpl": &bintree{callbackLayoutTmpl, map[string]*bintree{}},
	}},
	"edit.tmpl": &bintree{editTmpl, map[string]*bintree{}},
	"error.tmpl": &bintree{errorTmpl, map[string]*bintree{}},
	"healts.tmpl": &bintree{healtsTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"layout.tmpl": &bintree{layoutTmpl, map[string]*bintree{}},
	"login.tmpl": &bintree{loginTmpl, map[string]*bintree{}},
	"raffle.tmpl": &bintree{raffleTmpl, map[string]*bintree{}},
	"raffles.tmpl": &bintree{rafflesTmpl, map[string]*bintree{}},
	"settings.tmpl": &bintree{settingsTmpl, map[string]*bintree{}},
	"user_healts.tmpl": &bintree{user_healtsTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

